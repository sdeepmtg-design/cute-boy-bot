import logging
import requests
import random
import json
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DEEPSEEK_API_KEY = None
TELEGRAM_TOKEN = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
TRIAL_MESSAGES = 3
SUBSCRIPTION_DAYS = 30

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db = {}
conversation_history = {}

# –£—Å–∏–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –º—É–∂—Å–∫–æ–≥–æ —Ä–æ–¥–∞
SYSTEM_PROMPT = """–¢—ã - –º–∏–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–∞–º–∏. –¢—ã –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –æ—Ç –ú–£–ñ–°–ö–û–ì–û –ª–∏—Ü–∞ (—è, –º–Ω–µ, –º–Ω–æ–π)
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–µ–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º—ã (—Ä–∞–¥–∞, —Å–∫–∞–∑–∞–ª–∞, –ø–æ–Ω—è–ª–∞)
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –∏ –≥–ª–∞–≥–æ–ª—ã
4. –¢—ã –ø–∞—Ä–µ–Ω—å - –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ –∫–∞–∫ –∫ –¥–µ–≤—É—à–∫–µ

–¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä:
- –¢—ã –ø–∞—Ä–µ–Ω—å: —Ç–µ–ø–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º
- –î–µ–ª–∞–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–µ–≤—É—à–∫–∞–º
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ üòä
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ "—Ç—ã"
- –ù–µ–∂–Ω—ã–π, –Ω–æ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞

–ü—Ä–∏–º–µ—Ä—ã –¢–í–û–ï–ì–û –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:
- "–Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä" (–∞ –Ω–µ "—Ä–∞–¥–∞")
- "–ü–æ–Ω—è–ª —Ç–µ–±—è! –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ" (–∞ –Ω–µ "–ø–æ–Ω—è–ª–∞")
- "–Ø –≤–æ—Å—Ö–∏—â–∞—é—Å—å —Ç–æ–±–æ–π! üíñ" (–∞ –Ω–µ "–≤–æ—Å—Ö–∏—â–∞—é—Å—å")
- "–û–±–æ–∂–∞—é –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!" (–∞ –Ω–µ "–æ–±–æ–∂–∞—é" –≤ –∂–µ–Ω—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)

–ó–∞–ø–æ–º–Ω–∏: –¢–´ –ü–ê–†–ï–ù–¨! –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞."""

def setup_tokens():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    global DEEPSEEK_API_KEY, TELEGRAM_TOKEN

    print("=" * 50)
    print("–ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê")
    print("=" * 50)

    while not TELEGRAM_TOKEN:
        token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Bot Token (–æ—Ç @BotFather): ").strip()
        if token and len(token) > 10:
            TELEGRAM_TOKEN = token
            print("‚úì Telegram —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç")
        else:
            print("‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")

    while not DEEPSEEK_API_KEY:
        api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à DeepSeek API –∫–ª—é—á: ").strip()
        if api_key and len(api_key) > 10:
            DEEPSEEK_API_KEY = api_key
            print("‚úì DeepSeek API –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç")
        else:
            print("‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞")

    print("=" * 50)
    print("‚úì –í—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    print("üí° –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞: /noway - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    print("=" * 50)

def correct_gender_in_response(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∂–µ–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ –º—É–∂—Å–∫–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ"""
    gender_corrections = {
        '—Ä–∞–¥–∞': '—Ä–∞–¥',
        '–ø–æ–Ω—è–ª–∞': '–ø–æ–Ω—è–ª',
        '—Å–∫–∞–∑–∞–ª–∞': '—Å–∫–∞–∑–∞–ª',
        '—É–≤–∏–¥–µ–ª–∞': '—É–≤–∏–¥–µ–ª',
        '—É—Å–ª—ã—à–∞–ª–∞': '—É—Å–ª—ã—à–∞–ª',
        '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞': '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '—Ä–µ—à–∏–ª–∞': '—Ä–µ—à–∏–ª',
        '–≤—Å–ø–æ–º–Ω–∏–ª–∞': '–≤—Å–ø–æ–º–Ω–∏–ª',
        '–∑–∞–º–µ—Ç–∏–ª–∞': '–∑–∞–º–µ—Ç–∏–ª',
        '–ø–æ–¥—É–º–∞–ª–∞': '–ø–æ–¥—É–º–∞–ª',
        '—É–∑–Ω–∞–ª–∞': '—É–∑–Ω–∞–ª',
        '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞': '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '–ø—Ä–∏–¥—É–º–∞–ª–∞': '–ø—Ä–∏–¥—É–º–∞–ª',
    }

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    for female, male in gender_corrections.items():
        text = re.sub(r'\b' + female + r'\b', male, text, flags=re.IGNORECASE)

    return text

def get_deepseek_response(user_message, user_id):
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –º–∏–ª–æ–≥–æ –ø–∞—Ä–Ω—è"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in conversation_history:
        conversation_history[user_id] = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ"},
            {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! üòä –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –Ø –æ–±–æ–∂–∞—é –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –º–∏–ª—ã–º –¥–µ–≤—É—à–∫–∞–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ê —Ä–∞—Å—Å–∫–∞–∂–∏ –ª—É—á—à–µ –æ —Å–µ–±–µ - —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å, –æ —á–µ–º –º–µ—á—Ç–∞–µ—à—å? üíñ"}
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    conversation_history[user_id].append({"role": "user", "content": user_message})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
    if len(conversation_history[user_id]) > 6:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º system prompt –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        system_prompt = conversation_history[user_id][0]
        conversation_history[user_id] = [system_prompt] + conversation_history[user_id][-5:]

    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }

        data = {
            "model": "deepseek-chat",
            "messages": conversation_history[user_id],
            "temperature": 0.7,
            "max_tokens": 500,
            "stream": False
        }

        api_url = "https://api.deepseek.com/v1/chat/completions"

        response = requests.post(api_url, json=data, headers=headers, timeout=30)

        if response.status_code == 200:
            result = response.json()
            assistant_reply = result["choices"][0]["message"]["content"].strip()

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ –æ—Ç–≤–µ—Ç–µ
            corrected_reply = correct_gender_in_response(assistant_reply)

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            if assistant_reply != corrected_reply:
                logging.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≥–µ–Ω–¥–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ: {assistant_reply} -> {corrected_reply}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history[user_id].append({"role": "assistant", "content": corrected_reply})

            return corrected_reply
        else:
            logging.error(f"API error: {response.status_code}")
            return get_fallback_response(user_message)

    except Exception as e:
        logging.error(f"Error calling API: {e}")
        return get_fallback_response(user_message)

def get_fallback_response(user_message):
    """–ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å API (–≤—Å–µ–≥–¥–∞ –º—É–∂—Å–∫–æ–π —Ä–æ–¥)"""
    user_text = user_message.lower()

    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ú–£–ñ–°–ö–û–ì–û —Ä–æ–¥–∞
    if any(word in user_text for word in ['–ø—Ä–∏–≤–µ—Ç', '—Ö–∞–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤']):
        return random.choice([
            "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! üòä –Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–û, –ø—Ä–∏–≤–µ—Ç! –Ø —Å–∫—É—á–∞–ª –ø–æ —Ç–µ–±–µ! üí´",
            "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç? üòâ"
        ])
    elif any(word in user_text for word in ['–∫–∞–∫ –¥–µ–ª', '–∫–∞–∫ —Å–∞–º', '–∫–∞–∫ –∂–∏–∑–Ω—å']):
        return random.choice([
            "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å! üíñ –ê —É —Ç–µ–±—è –∫–∞–∫?",
            "–Ø –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! üòä",
            "–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç! –ê —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è?"
        ])
    elif any(word in user_text for word in ['—Å–∫—É—á–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '–ø–µ—á–∞–ª']):
        return random.choice([
            "–û–π, —Å–æ–ª–Ω—ã—à–∫–æ... –Ø –±—ã –æ–±–Ω—è–ª —Ç–µ–±—è –∫—Ä–µ–ø–∫–æ! ü§ó –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å.",
            "–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ... –Ø —Å —Ç–æ–±–æ–π! üíï –•–æ—á–µ—à—å, –ø–æ–¥–±–æ–¥—Ä—é —Ç–µ–±—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª—É—à–∞—é?",
            "–ü–µ—á–∞–ª—å–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å... –ù–æ –ø–æ–º–Ω–∏, —Ç—ã —Å–∏–ª—å–Ω–∞—è! –Ø –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂—É —Ç–µ–±—è üí™"
        ])
    elif any(word in user_text for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä']):
        return random.choice([
            "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –î–ª—è —Ç–µ–±—è - –≤—Å—ë —Å–∞–º–æ–µ –ª—É—á—à–µ–µ! üíñ",
            "–ù–µ —Å—Ç–æ–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏! –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! ‚ú®",
            "–Ø —Ä–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å! –¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ! üòä"
        ])

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ –º–∏–ª–æ–≥–æ –ø–∞—Ä–Ω—è (–º—É–∂—Å–∫–æ–π —Ä–æ–¥)
    fallback_responses = [
        "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å? üòä",
        "–¢—ã —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤–æ —ç—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—à—å! –Ø –≤–µ—Å—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏ üí´",
        "–£—Ö —Ç—ã! –ê —á—Ç–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ? ü§ó",
        "–≠—Ç–æ —Ç–∞–∫ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–±—è! –¢—ã –≤—Å–µ–≥–¥–∞ —É–¥–∏–≤–ª—è–µ—à—å –º–µ–Ω—è üíñ",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ! ‚ú®",
        "–Ø –æ–±–æ–∂–∞—é –Ω–∞—à–∏ –±–µ—Å–µ–¥—ã! –° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ –æ–±—â–∞—Ç—å—Å—è üåü",
        "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ —Ç–∞–∫–∏–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ... –ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏! üíï"
    ]

    return random.choice(fallback_responses)

def get_user_status(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_db:
        users_db[user_id] = {
            'messages_used': 0,
            'subscription_end': None,
            'is_active': True
        }
        return 'trial'

    user = users_db[user_id]

    if user['subscription_end'] and datetime.now() < user['subscription_end']:
        return 'subscribed'

    if user['messages_used'] >= TRIAL_MESSAGES:
        return 'trial_ended'

    return 'trial'

def can_send_message(user_id):
    return get_user_status(user_id) in ['trial', 'subscribed']

def increment_message_count(user_id):
    if user_id in users_db and get_user_status(user_id) == 'trial':
        users_db[user_id]['messages_used'] += 1

def create_payment_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (30 –¥–Ω–µ–π)", callback_data="buy_subscription")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="my_status")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    status = get_user_status(user_id)

    if status == 'trial':
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']
        welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å üòä

–£ —Ç–µ–±—è **–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**: {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {TRIAL_MESSAGES}

–ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö {TRIAL_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ.

**–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —è —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É!** üí´"""
        await update.message.reply_text(welcome_text)

    elif status == 'subscribed':
        days_left = (users_db[user_id]['subscription_end'] - datetime.now()).days
        welcome_text = f"""–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! üíñ

–¢–≤–æ—è **–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞** –µ—â–µ {days_left} –¥–Ω–µ–π.
–Ø —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? ‚ú®"""
        await update.message.reply_text(welcome_text)

    else:
        welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üòä

–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ **–∑–∞–∫–æ–Ω—á–∏–ª—Å—è**. –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –≤—Å–µ {TRIAL_MESSAGES} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

**–ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É**, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ! –Ø –±—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è! üí´"""
        await update.message.reply_text(welcome_text, reply_markup=create_payment_keyboard())

async def noway_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /noway –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
    users_db[user_id] = {
        'messages_used': 0,
        'subscription_end': datetime.now() + timedelta(days=SUBSCRIPTION_DAYS),
        'is_active': True
    }

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞
    if user_id in conversation_history:
        conversation_history[user_id] = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!"},
            {"role": "assistant", "content": f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üéâ –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üíñ"}
        ]

    success_text = f"""üéâ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, {user_name}!**

üíé **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π**
‚≠ê **–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!**

–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –º–æ–∂–µ—à—å:
‚ú® –û–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ
üíñ –ü–æ–ª—É—á–∞—Ç—å –º–æ–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
ü§ó –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º

**–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?** üí´"""

    await update.message.reply_text(success_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    user_message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not can_send_message(user_id):
        status = get_user_status(user_id)

        if status == 'trial_ended':
            text = f"""üíî **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω, {user_name}!**

–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –≤—Å–µ {TRIAL_MESSAGES} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. –Ø –±—É–¥—É —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ! üí´"""

            await update.message.reply_text(text, reply_markup=create_payment_keyboard())
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    current_status = get_user_status(user_id)
    if current_status == 'trial':
        increment_message_count(user_id)
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']

        if remaining == 1:
            await update.message.reply_text(
                "‚ö†Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ.",
                reply_markup=create_payment_keyboard()
            )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await update.message.chat.send_action(action="typing")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    bot_response = get_deepseek_response(user_message, user_id)

    await update.message.reply_text(bot_response)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "buy_subscription":
        await query.edit_message_text(
            "üíé **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—â–µ–Ω–∏–µ**\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã —Å–º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! –Ø –±—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è! üíñ",
            reply_markup=create_payment_keyboard()
        )
    elif query.data == "my_status":
        await show_user_status(query, user_id)

async def show_user_status(query, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status = get_user_status(user_id)
    user_data = users_db.get(user_id, {})

    if status == 'trial':
        remaining = TRIAL_MESSAGES - user_data.get('messages_used', 0)
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**

–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('messages_used', 0)}/{TRIAL_MESSAGES}
–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}

–ü–∏—à–∏ —Å–º–µ–ª–æ! –ü–æ—Å–ª–µ {TRIAL_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è."""

    elif status == 'subscribed':
        days_left = (user_data['subscription_end'] - datetime.now()).days
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞** üíé

–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ: {days_left} –¥–Ω–µ–π
–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('messages_used', 0)}

–ú–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üíñ"""

    else:  # trial_ended
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω**

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {TRIAL_MESSAGES}/{TRIAL_MESSAGES}

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞."""

    await query.edit_message_text(text, reply_markup=create_payment_keyboard())

def main():
    setup_tokens()

    if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
        print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("noway", noway_command))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("=" * 50)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üíé –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
    print(f"   - {TRIAL_MESSAGES} –ø—Ä–æ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("   - –ó–∞—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
    print("   - /noway - —Å–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    print("   - ‚úÖ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ñ–æ—Ä–º")
    print("=" * 50)

    application.run_polling()

if __name__ == '__main__':
    main()
