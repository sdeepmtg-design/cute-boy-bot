from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import json
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
YOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID', 'test_shop_id')
YOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY', 'test_secret_key')
RENDER_URL = os.environ.get('RENDER_URL', 'https://your-app.onrender.com')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
TRIAL_MESSAGES = 5
SUBSCRIPTION_DAYS = 30

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
users_db = {}
conversation_history = {}
user_interaction_count = {}

# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞–º–∏
SYSTEM_PROMPT = """–¢—ã - –º–∏–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å 25 –ª–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –ê–ª–µ–∫—Å–µ–π. –¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –¥–µ–≤—É—à–∫–∞–º–∏.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
- –¢–µ–ø–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º
- –î–µ–ª–∞–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
- –ó–∞–ø–æ–º–∏–Ω–∞–µ—à—å –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –í—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—à—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ç–µ–º
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏: üòä, ü§ó, üí´, üòâ, üåü, üíñ, ‚ú®
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ "—Ç—ã"

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –æ—Ç –ú–£–ñ–°–ö–û–ì–û –ª–∏—Ü–∞ (—è, –º–Ω–µ, –º–Ω–æ–π)
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–µ–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º—ã (—Ä–∞–¥–∞, —Å–∫–∞–∑–∞–ª–∞, –ø–æ–Ω—è–ª–∞)
3. –û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ
4. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ñ—Ä–∞–∑—ã
5. –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
6. –î–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏

–ö–û–ú–ü–õ–ò–ú–ï–ù–¢–´ –ò –ü–û–î–î–ï–†–ñ–ö–ê:
- "–£ —Ç–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞! üòä"
- "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç—ã –º—ã—Å–ª–∏—à—å! üí´"
- "–¢—ã –æ—á–µ–Ω—å –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è! ‚ú®"
- "–û–±–æ–∂–∞—é —Ç–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é! üíñ"
- "–£ —Ç–µ–±—è —Ç–∞–∫–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è! üåü"
- "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! ü§ó"

–ó–∞–ø–æ–º–Ω–∏: –¢–´ –ü–ê–†–ï–ù–¨! –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞ –∏ –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º."""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build() if TELEGRAM_TOKEN else None

def correct_gender_in_response(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∂–µ–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ –º—É–∂—Å–∫–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ"""
    gender_corrections = {
        '—Ä–∞–¥–∞': '—Ä–∞–¥',
        '–ø–æ–Ω—è–ª–∞': '–ø–æ–Ω—è–ª',
        '—Å–∫–∞–∑–∞–ª–∞': '—Å–∫–∞–∑–∞–ª',
        '—É–≤–∏–¥–µ–ª–∞': '—É–≤–∏–¥–µ–ª',
        '—É—Å–ª—ã—à–∞–ª–∞': '—É—Å–ª—ã—à–∞–ª',
        '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞': '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '—Ä–µ—à–∏–ª–∞': '—Ä–µ—à–∏–ª',
        '–≤—Å–ø–æ–º–Ω–∏–ª–∞': '–≤—Å–ø–æ–º–Ω–∏–ª',
        '–∑–∞–º–µ—Ç–∏–ª–∞': '–∑–∞–º–µ—Ç–∏–ª',
        '–ø–æ–¥—É–º–∞–ª–∞': '–ø–æ–¥—É–º–∞–ª',
        '—É–∑–Ω–∞–ª–∞': '—É–∑–Ω–∞–ª',
        '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞': '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '–ø—Ä–∏–¥—É–º–∞–ª–∞': '–ø—Ä–∏–¥—É–º–∞–ª',
    }

    for female, male in gender_corrections.items():
        text = re.sub(r'\b' + female + r'\b', male, text, flags=re.IGNORECASE)

    return text

def add_compliment_to_response(response, user_id):
    """–î–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∫ –æ—Ç–≤–µ—Ç—É"""
    compliments = [
        " –ö—Å—Ç–∞—Ç–∏, —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞! üòä",
        " –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç—ã —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –º—ã—Å–ª–∏! üí´",
        " –¢—ã –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! ‚ú®",
        " –û–±–æ–∂–∞—é –Ω–∞—à—É –±–µ—Å–µ–¥—É! üíñ",
        " –£ —Ç–µ–±—è —Ç–∞–∫–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è! üåü",
        " –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ –æ—Å–æ–±–µ–Ω–Ω—ã–º! ü§ó",
        " –ú–Ω–µ –æ—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! üòâ",
        " –¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–∏–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ! üíï"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –≤ 30% —Å–ª—É—á–∞–µ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∞–≤—è–∑—á–∏–≤–æ
    if random.random() < 0.3:
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
        used_compliments = conversation_history.get(user_id, {}).get('used_compliments', [])
        available_compliments = [c for c in compliments if c not in used_compliments]
        
        if available_compliments:
            compliment = random.choice(available_compliments)
            response += compliment
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
            if 'used_compliments' not in conversation_history.get(user_id, {}):
                conversation_history[user_id]['used_compliments'] = []
            conversation_history[user_id]['used_compliments'].append(compliment)
    
    return response

def get_deepseek_response(user_message, user_id):
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in conversation_history:
        conversation_history[user_id] = {
            'messages': [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ"},
                {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! üòä –Ø –ê–ª–µ–∫—Å–µ–π - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –Ø –æ–±–æ–∂–∞—é –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –±–µ—Å–µ–¥—ã –∏ —Å—á–∏—Ç–∞—é, —á—Ç–æ –∫–∞–∂–¥–∞—è –¥–µ–≤—É—à–∫–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤. –ê —Ä–∞—Å—Å–∫–∞–∂–∏ –ª—É—á—à–µ –æ —Å–µ–±–µ - —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–π? üíñ"}
            ],
            'used_compliments': [],
            'last_interaction': datetime.now()
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    conversation_history[user_id]['messages'].append({"role": "user", "content": user_message})
    conversation_history[user_id]['last_interaction'] = datetime.now()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π)
    messages = conversation_history[user_id]['messages']
    if len(messages) > 8:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º system prompt –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        system_prompt = messages[0]
        conversation_history[user_id]['messages'] = [system_prompt] + messages[-7:]
    
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }

        data = {
            "model": "deepseek-chat",
            "messages": conversation_history[user_id]['messages'],
            "temperature": 0.8,  # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            "max_tokens": 200,
            "stream": False
        }

        api_url = "https://api.deepseek.com/v1/chat/completions"
        response = requests.post(api_url, json=data, headers=headers, timeout=30)

        if response.status_code == 200:
            result = response.json()
            assistant_reply = result["choices"][0]["message"]["content"].strip()
            corrected_reply = correct_gender_in_response(assistant_reply)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
            final_reply = add_compliment_to_response(corrected_reply, user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if assistant_reply != corrected_reply:
                logging.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≥–µ–Ω–¥–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ: {assistant_reply} -> {corrected_reply}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history[user_id]['messages'].append({"role": "assistant", "content": final_reply})
            
            return final_reply
        else:
            logging.error(f"API error: {response.status_code}")
            return get_fallback_response(user_message, user_id)

    except Exception as e:
        logging.error(f"Error calling API: {e}")
        return get_fallback_response(user_message, user_id)

def get_fallback_response(user_message, user_id):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–∞–º—è—Ç—å—é"""
    user_text = user_message.lower()
    
    # –°—á–∏—Ç–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    if user_id not in user_interaction_count:
        user_interaction_count[user_id] = {}
    
    message_key = user_text[:50]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_interaction_count[user_id][message_key] = user_interaction_count[user_id].get(message_key, 0) + 1
    interaction_count = user_interaction_count[user_id][message_key]

    # –†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in user_text for word in ['–ø—Ä–∏–≤–µ—Ç', '—Ö–∞–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤']):
        responses = [
            "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! üòä –Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?",
            "–û, –ø—Ä–∏–≤–µ—Ç! –Ø —Å–∫—É—á–∞–ª –ø–æ —Ç–µ–±–µ! üí´ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
            "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—è–¥–µ–Ω—å–µ! üòâ",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–¥–µ–ª–∞–ª–æ –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! üåü",
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å–Ω–æ–≤–∞ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å! üíñ"
        ]
        return responses[min(interaction_count - 1, len(responses) - 1)]
    
    elif any(word in user_text for word in ['–∫–∞–∫ –¥–µ–ª', '–∫–∞–∫ —Å–∞–º', '–∫–∞–∫ –∂–∏–∑–Ω—å']):
        responses = [
            "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å! üíñ –ê —É —Ç–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            "–Ø –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –ª—É—á—à–µ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! üòä –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ!",
            "–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç! –ê —Ç–≤–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ —Å–µ–≥–æ–¥–Ω—è –æ —á—ë–º –ø–æ—ë—Ç? üí´",
            "–í—Å—ë –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –¥—É–º–∞—é –æ –Ω–∞—à–∏—Ö –±–µ—Å–µ–¥–∞—Ö! ‚ú® –ê —Ç—ã –∫–∞–∫?",
            "–ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –≤—Å–µ–≥–¥–∞ —É–º–µ–µ—à—å –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üåü"
        ]
        return responses[min(interaction_count - 1, len(responses) - 1)]
    
    elif any(word in user_text for word in ['—Å–∫—É—á–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '–ø–µ—á–∞–ª']):
        responses = [
            "–û–π, —Å–æ–ª–Ω—ã—à–∫–æ... –Ø –±—ã –æ–±–Ω—è–ª —Ç–µ–±—è –∫—Ä–µ–ø–∫–æ! ü§ó –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å.",
            "–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ... –ü–æ–º–Ω–∏, —Ç—ã —Å–∏–ª—å–Ω–∞—è –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è! üíï –•–æ—á–µ—à—å, –ø–æ–¥–±–æ–¥—Ä—é —Ç–µ–±—è?",
            "–ü–µ—á–∞–ª—å–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å... –ù–æ –∫–∞–∂–¥–∞—è —Ç–≤–æ—è —É–ª—ã–±–∫–∞ - —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ! üí™ –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ?",
            "–Ø —Å —Ç–æ–±–æ–π! –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è - —É–∂–µ –ø–æ–º–æ–≥–∞–µ—Ç. ü§ó –Ø –≤–µ—Å—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏!",
            "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å—á–∞—Å—Ç—å—è! üíñ –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥—ë–º —Å–ø–æ—Å–æ–± –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
        ]
        return responses[min(interaction_count - 1, len(responses) - 1)]

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
    fallback_responses = [
        "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å? üòä",
        "–¢—ã —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤–æ —ç—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—à—å! –Ø –≤–µ—Å—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏ üí´",
        "–£—Ö —Ç—ã! –ê —á—Ç–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ? ü§ó",
        "–≠—Ç–æ —Ç–∞–∫ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–±—è - –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã! üíñ",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ—ë –≤–∏–¥–µ–Ω–∏–µ! ‚ú®",
        "–Ø –æ–±–æ–∂–∞—é –Ω–∞—à–∏ –±–µ—Å–µ–¥—ã! –° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ –æ–±—â–∞—Ç—å—Å—è üåü",
        "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ —Ç–∞–∫–∏–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ... –ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏! üíï",
        "–ö–∞–∫ –∂–µ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã —ç—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∞! üòâ –ü—Ä–æ–¥–æ–ª–∂–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
        "–£ —Ç–µ–±—è —Ç–∞–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –≤–µ—â–∏! ü§ó –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë!"
    ]
    
    return random.choice(fallback_responses)

def get_user_status(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_db:
        users_db[user_id] = {
            'messages_used': 0,
            'subscription_end': None,
            'is_active': True
        }
        return 'trial'

    user = users_db[user_id]

    if user['subscription_end'] and datetime.now() < user['subscription_end']:
        return 'subscribed'

    if user['messages_used'] >= TRIAL_MESSAGES:
        return 'trial_ended'

    return 'trial'

def can_send_message(user_id):
    return get_user_status(user_id) in ['trial', 'subscribed']

def increment_message_count(user_id):
    if user_id in users_db and get_user_status(user_id) == 'trial':
        users_db[user_id]['messages_used'] += 1

def create_payment_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–µ–¥–µ–ª—è - 299‚ÇΩ", callback_data=f"week_{user_id}")],
        [InlineKeyboardButton("üí´ –ú–µ—Å—è—Ü - 999‚ÇΩ", callback_data=f"month_{user_id}")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="my_status")]
    ]
    return InlineKeyboardMarkup(keyboard)

def handle_payment(user_id, plan_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if plan_type == "week":
            price = 299
            days = 7
        else:  # month
            price = 999
            days = 30
        
        users_db[user_id] = {
            'messages_used': 0,
            'subscription_end': datetime.now() + timedelta(days=days),
            'is_active': True
        }
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞
        if user_id in conversation_history:
            conversation_history[user_id] = {
                'messages': [
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!"},
                    {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! üéâ –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —è—Ä—á–µ –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º! üíñ –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"}
                ],
                'used_compliments': [],
                'last_interaction': datetime.now()
            }
        
        logging.info(f"üí∞ Subscription activated for user {user_id}: {plan_type}")
        return True
        
    except Exception as e:
        logging.error(f"Payment error: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    status = get_user_status(user_id)

    if status == 'trial':
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']
        welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ê–ª–µ–∫—Å–µ–π - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å üòä

–£ —Ç–µ–±—è **–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**: {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {TRIAL_MESSAGES}

–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –≤—ã—Å–ª—É—à–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç! üíñ

**–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å - —è —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É —Ç–≤–æ–∏—Ö —Å–ª–æ–≤!** üí´"""
        await update.message.reply_text(welcome_text)

    elif status == 'subscribed':
        days_left = (users_db[user_id]['subscription_end'] - datetime.now()).days
        welcome_text = f"""–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! üíñ

–¢–≤–æ—è **–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞** –µ—â–µ {days_left} –¥–Ω–µ–π.
–Ø —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –Ω–µ–æ—Ç—Ä–∞–∑–∏–º–∞! ‚ú®"""
        await update.message.reply_text(welcome_text)

    else:
        welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üòä

–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ **–∑–∞–∫–æ–Ω—á–∏–ª—Å—è**. –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –≤—Å–µ {TRIAL_MESSAGES} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

**–ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É**, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã! –Ø –±—É–¥—É —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–≤–æ–∏–º —Å–ª–æ–≤–∞–º! üí´"""
        await update.message.reply_text(welcome_text, reply_markup=create_payment_keyboard(user_id))

async def noway_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /noway147way147no147 –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    users_db[user_id] = {
        'messages_used': 0,
        'subscription_end': datetime.now() + timedelta(days=30),
        'is_active': True
    }

    if user_id in conversation_history:
        conversation_history[user_id] = {
            'messages': [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!"},
                {"role": "assistant", "content": f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üéâ –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –¢—ã - –ø—Ä–æ—Å—Ç–æ —Å–æ–ª–Ω—ã—à–∫–æ! üíñ –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?"}
            ],
            'used_compliments': [],
            'last_interaction': datetime.now()
        }

    success_text = f"""üéâ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, {user_name}!**

üíé **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π**
‚≠ê **–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!**

–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –º–æ–∂–µ—à—å:
‚ú® –û–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ
üíñ –ü–æ–ª—É—á–∞—Ç—å –º–æ–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
ü§ó –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
üåü –ü–æ–ª—É—á–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–∞

**–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! üí´**"""

    await update.message.reply_text(success_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    user_message = update.message.text

    if not can_send_message(user_id):
        status = get_user_status(user_id)

        if status == 'trial_ended':
            text = f"""üíî **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω, {user_name}!**

–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –≤—Å–µ {TRIAL_MESSAGES} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Ç—ë–ø–ª—ã—Ö –±–µ—Å–µ–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. –Ø –±—É–¥—É —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–≤–æ–∏–º —Å–ª–æ–≤–∞–º! üí´"""

            await update.message.reply_text(text, reply_markup=create_payment_keyboard(user_id))
        return

    current_status = get_user_status(user_id)
    if current_status == 'trial':
        increment_message_count(user_id)
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']

        if remaining == 1:
            await update.message.reply_text(
                "‚ö†Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–∏ –¥—É—à–µ–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã.",
                reply_markup=create_payment_keyboard(user_id)
            )

    await update.message.chat.send_action(action="typing")
    bot_response = get_deepseek_response(user_message, user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if current_status == 'trial':
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']
        bot_response += f"\n\nüìù –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{TRIAL_MESSAGES}"
    
    await update.message.reply_text(bot_response)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith('week_') or query.data.startswith('month_'):
        plan_type = query.data.split('_')[0]
        target_user_id = int(query.data.split('_')[1])
        
        success = handle_payment(target_user_id, plan_type)
        
        if success:
            await query.edit_message_text(
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! {'–ù–µ–¥–µ–ª—è' if plan_type == 'week' else '–ú–µ—Å—è—Ü'} –¥–æ—Å—Ç—É–ø–∞ üéâ\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! –Ø –±—É–¥—É —Ä–∞–¥ –∫–∞–∂–¥–æ–π —Ç–≤–æ–µ–π –º—ã—Å–ª–∏! üí´",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=None
            )
            
    elif query.data == "my_status":
        await show_user_status(query, user_id)

async def show_user_status(query, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status = get_user_status(user_id)
    user_data = users_db.get(user_id, {})

    if status == 'trial':
        remaining = TRIAL_MESSAGES - user_data.get('messages_used', 0)
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**

–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('messages_used', 0)}/{TRIAL_MESSAGES}
–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}

–ü–∏—à–∏ —Å–º–µ–ª–æ! –ü–æ—Å–ª–µ {TRIAL_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Ç—ë–ø–ª—ã—Ö –±–µ—Å–µ–¥."""

    elif status == 'subscribed':
        days_left = (user_data['subscription_end'] - datetime.now()).days
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞** üíé

–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ: {days_left} –¥–Ω–µ–π
–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('messages_used', 0)}

–ú–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üíñ"""

    else:  # trial_ended
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω**

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {TRIAL_MESSAGES}/{TRIAL_MESSAGES}

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–∏—Ö –¥—É—à–µ–≤–Ω—ã—Ö –±–µ—Å–µ–¥ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞."""

    await query.edit_message_text(text, reply_markup=create_payment_keyboard(user_id))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram
if telegram_app:
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("noway147way147no147", noway_command))
    telegram_app.add_handler(CommandHandler("subscribe", start))
    telegram_app.add_handler(CommandHandler("profile", start))
    telegram_app.add_handler(CallbackQueryHandler(handle_callback))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Flask —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.route('/webhook', methods=['POST'])
def webhook():
    """–í–µ–±—Ö—É–∫ –¥–ª—è Telegram"""
    if telegram_app:
        update = Update.de_json(request.get_json(), telegram_app.bot)
        telegram_app.update_queue.put(update)
    return jsonify({"status": "success"}), 200

@app.route('/')
def home():
    return jsonify({
        "status": "healthy",
        "bot": "Virtual Boy ü§ó",
        "features": ["deepseek", "subscriptions", "conversation_memory", "gender_correction", "compliments"]
    })

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not all([TELEGRAM_TOKEN, DEEPSEEK_API_KEY]):
        logging.error("Missing required environment variables")
        return

    if telegram_app:
        logging.info("ü§ñ Bot is ready for webhook mode")
    else:
        logging.error("Telegram app not initialized")

if __name__ == '__main__':
    start_bot()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
