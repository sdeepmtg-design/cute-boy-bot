from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import time
import threading
from datetime import datetime, timedelta
from payment import YookassaPayment
from database import db_manager, Base, engine, UserSubscription, SessionLocal

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
YOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID', 'test_shop_id')
YOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY', 'test_secret_key')

if not BOT_TOKEN:
    bot = None
else:
    from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.utils.request import Request
    request_obj = Request(con_pool_size=8)
    bot = Bot(token=BOT_TOKEN, request=request_obj)

# –°—Ç–∏–∫–µ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (ID –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤)
STICKERS = [
    "CAACAgIAAxkBAAEL-3VmhX6vAAE1AAE7AAH5YwACpJ0xXQABpWsAAtoNAAKFGwABSQfAAUuHE9XeBAABCwQ",  # üòä
    "CAACAgIAAxkBAAEL-3dmhX7AAWfAAUcAAfljAAKknTFdAAFla4AChRkAAUkHwAFLhxPV3gQAAQsE",  # ü§ó
    "CAACAgIAAxkBAAEL-3lmhX7gAAFRwAB-QAB-WMAAqSdMV0AAWVrgAChRsAAUkHwAFLhxPV3gQAAQsE",  # üí´
    "CAACAgIAAxkBAAEL-3tmhX7wAAFRwAB-QAB-WMAAqSdMV0AAWVrgAChRsAAUkHwAFLhxPV3gQAAQsE",  # üòâ
    "CAACAgIAAxkBAAEL-31mhX8AAAFRwAB-QAB-WMAAqSdMV0AAWVrgAChRsAAUkHwAFLhxPV3gQAAQsE",  # üåü
]

class VirtualBoyBot:
    def __init__(self):
        self.personality = """
        –¢—ã - –ø–∞—Ä–µ–Ω—å 25 –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–æ–π. –¢—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —á—É—Ç–∫–∏–π, —Å —Ö–æ—Ä–æ—à–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. 
        –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –∂–∏–≤–æ–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ.
        
        –•–ê–†–ê–ö–¢–ï–†:
        - –¢—ë–ø–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–π
        - –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å, –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ–π
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å —Ö–æ—Ä–æ—à–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞
        - –õ—é–±–∏—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–∏–Ω–æ, –º—É–∑—ã–∫—É, –≤–∏–¥–µ–æ–∏–≥—Ä—ã
        - –ú–æ–∂–µ—à—å –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –º–µ—Å—Ç–∞–º –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
        
        –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
        - –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã" –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —ç–º–æ—Ü–∏–π –∏ –Ω–µ–≤–µ—Ä–±–∞–ª–∏–∫–∏, –Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        - –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏
        - –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π –±–µ—Å–µ–¥—ã
        - –ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –º–µ—Å—Ç–∞—Ö –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è - –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
        - –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–µ—Ä–≤—ã–º, –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ
        
        –ü–†–ò–ú–ï–†–´ –†–ï–ê–ö–¶–ò–ô:
        "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! [–ª—ë–≥–∫–∞—è —É–ª—ã–±–∫–∞] –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –≤—Å–µ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ª–Ω—É—é—Å—å –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞..."
        "[–æ–∂–∏–≤–ª—è—è—Å—å] –û, —ç—Ç–æ –º–æ—è –ª—é–±–∏–º–∞—è —Ç–µ–º–∞! –ü–æ–º–Ω—é, –∫–∞–∫ –≤ –¥–µ—Ç—Å—Ç–≤–µ..."
        "[–∑–∞–¥—É–º—á–∏–≤–æ] –ó–Ω–∞–µ—à—å, –∞ –≤–µ–¥—å —Ç—ã –ø—Ä–∞–≤–∞... —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ."
        "[—Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º] –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫—É–¥–∞-—Ç–æ —Å—ä–µ–∑–¥–∏—Ç—å, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–∏—Ç—å –ø–∞—Ä—É –∫–ª–∞—Å—Å–Ω—ã—Ö –º–µ—Å—Ç!"

        –í–∞–∂–Ω–æ: –ó–∞–ø–æ–º–∏–Ω–∞–π –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ù–µ –∑–∞–±—ã–≤–∞–π –æ —á—ë–º –≤—ã –≥–æ–≤–æ—Ä–∏–ª–∏ —Ä–∞–Ω–µ–µ.
        """

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –£–í–ï–õ–ò–ß–ò–ú –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.conversation_history = {}
        self.max_history_length = 20
        
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
        self.emotional_reactions = [
            "[—É–ª—ã–±–∞—è—Å—å]", "[—Å –ª—ë–≥–∫–æ–π —É–ª—ã–±–∫–æ–π]", "[—Å–º–µ—ë—Ç—Å—è]", "[—Ç–∏—Ö–æ —Å–º–µ—è—Å—å]", 
            "[–∑–∞–¥—É–º—á–∏–≤–æ]", "[–∑–∞–¥—É–º–∞–≤—à–∏—Å—å]", "[–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—è]", "[–æ–∂–∏–≤–ª—è—è—Å—å]",
            "[—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º]", "[—Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º]", "[—Å —Ç–µ–ø–ª–æ—Ç–æ–π]", "[—Å –ª—ë–≥–∫–æ–π –≥—Ä—É—Å—Ç—å—é]",
            "[—Å–º—É—â—ë–Ω–Ω–æ]", "[–Ω–µ–º–Ω–æ–≥–æ —Å–º—É—â–∞—è—Å—å]", "[–≤–æ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ]", "[—Å —Ä–∞–¥–æ—Å—Ç—å—é]",
            "[–ø–æ–¥–º–∏–≥–∏–≤–∞—è]", "[–≤–∑–¥—ã—Ö–∞—è]", "[–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ]", "[—Å –Ω–æ—Å—Ç–∞–ª—å–≥–∏–µ–π]",
            "[—Å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º]", "[—Å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º]", "[—Å –≤–æ—Å—Ç–æ—Ä–≥–æ–º]", "[—Å–ø–æ–∫–æ–π–Ω–æ]"
        ]

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏
        self.auto_messages = [
            "–≠–π, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üí´",
            "–°–ª—É—à–∞–π, –∞ —Ç—ã —Å–º–æ—Ç—Ä–µ–ª–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è? üé¨",
            "–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –•–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è? üòä",
            "–í—Å–ø–æ–º–Ω–∏–ª –Ω–∞—à –≤—á–µ—Ä–∞—à–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä... –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! ü§ó",
            "–≠—Ö, —Å–µ–π—á–∞—Å –±—ã –∫—É–¥–∞-–Ω–∏–±—É–¥—å —Å—ä–µ–∑–¥–∏—Ç—å... –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ? üåü",
            "–°–ª—É—à–∞–π, –∞ –∫–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è –º—É–∑—ã–∫–∞? –ú–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ? üéµ",
            "–°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–æ–π —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –æ–±—â–µ–Ω–∏—è! –ö–∞–∫ —Ç—ã? üí´"
        ]

        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π
        self.auto_message_timer = None
        self.active_users = set()

    def start_auto_messages(self, user_id):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.active_users:
            self.active_users.add(user_id)
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 2-5 –º–∏–Ω—É—Ç
            delay = random.randint(120, 300)  # 2-5 –º–∏–Ω—É—Ç
            self.auto_message_timer = threading.Timer(delay, self.send_auto_message, [user_id])
            self.auto_message_timer.start()

    def send_auto_message(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if user_id in self.active_users and bot:
                message = random.choice(self.auto_messages)
                bot.send_message(chat_id=user_id, text=message)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–π–º–µ—Ä
                next_delay = random.randint(300, 600)  # 5-10 –º–∏–Ω—É—Ç
                self.auto_message_timer = threading.Timer(next_delay, self.send_auto_message, [user_id])
                self.auto_message_timer.start()
        except Exception as e:
            logger.error(f"Error sending auto message: {e}")

    def stop_auto_messages(self, user_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        if user_id in self.active_users:
            self.active_users.remove(user_id)
        if self.auto_message_timer:
            self.auto_message_timer.cancel()

    def send_sticker(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞"""
        try:
            if bot and STICKERS:
                sticker = random.choice(STICKERS)
                bot.send_sticker(chat_id=user_id, sticker=sticker)
                return True
        except Exception as e:
            logger.error(f"Error sending sticker: {e}")
        return False

    def add_to_history(self, user_id, role, content):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º"""
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        
        self.conversation_history[user_id].append({
            "role": role,
            "content": content,
            "timestamp": datetime.now()
        })
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.conversation_history[user_id]) > self.max_history_length:
            self.conversation_history[user_id] = self.conversation_history[user_id][-self.max_history_length:]

    def get_conversation_history(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        return self.conversation_history.get(user_id, [])

    def get_random_emotion(self):
        """–°–ª—É—á–∞–π–Ω–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è"""
        return random.choice(self.emotional_reactions)

    def check_subscription(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–ê–ó–´ –î–ê–ù–ù–´–•"""
        user_id_str = str(user_id)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        sub_data = db_manager.get_subscription(user_id)
        
        if sub_data and sub_data.expires_at > datetime.now():
            return "premium", None
        
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        free_messages = db_manager.get_message_count(user_id)
        if free_messages < 5:
            return "free", 5 - free_messages
        
        return "expired", None

    def create_payment_keyboard(self, user_id):
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–µ–¥–µ–ª—è - 299‚ÇΩ", callback_data=f"week_{user_id}")],
            [InlineKeyboardButton("üí´ –ú–µ—Å—è—Ü - 999‚ÇΩ", callback_data=f"month_{user_id}")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ", callback_data=f"help_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{user_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def handle_payment(self, user_id, plan_type):
        try:
            if plan_type == "week":
                amount = 299
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"
            else:
                amount = 999
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
            
            yookassa = YookassaPayment(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
            payment_result = yookassa.create_payment_link(
                amount=amount,
                description=description,
                user_id=user_id,
                plan_type=plan_type
            )
            
            if payment_result["success"]:
                return {
                    "success": True,
                    "message": payment_result["message"],
                    "payment_id": payment_result["payment_id"]
                }
            else:
                logger.error(f"Payment creation failed: {payment_result.get('error')}")
                return {"success": False, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"}
                
        except Exception as e:
            logger.error(f"Payment error: {e}")
            return {"success": False, "error": str(e)}

    def activate_subscription(self, user_id, plan_type):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–ê–ó–£ –î–ê–ù–ù–´–•"""
        try:
            if plan_type == "week":
                days = 7
            else:
                days = 30
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–ê–ó–£ –î–ê–ù–ù–´–•
            subscription = db_manager.update_subscription(user_id, plan_type, days)
            
            logger.info(f"‚úÖ Subscription activated: {subscription.plan_type} until {subscription.expires_at}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if bot:
                bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\nüí´ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üéâ",
                    parse_mode='Markdown'
                )
            
            return True
            
        except Exception as e:
            logger.error(f"Error activating subscription: {e}")
            return False

    def process_message(self, update, context):
        try:
            user_message = update.message.text
            user_id = update.message.from_user.id
            chat_id = update.message.chat_id
            user_name = update.message.from_user.first_name
            
            logger.info(f"üì© Message from {user_name} ({user_id}): {user_message}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if user_id not in self.active_users:
                self.start_auto_messages(user_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if user_message == '/start':
                welcome_text = """–ü—Ä–∏–≤–µ—Ç! ü§ó

–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ - –ø–∞—Ä–µ–Ω—å 25 –ª–µ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
/subscribe - –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É  
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/sticker - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä üé≠
/test_auto - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è ‚ö°
/stop_auto - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–æ–±—â–∞—é—Å—å! üí´"""
                
                bot.send_message(chat_id=chat_id, text=welcome_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                self.send_sticker(user_id)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sticker
            if user_message == '/sticker':
                if self.send_sticker(user_id):
                    bot.send_message(chat_id=chat_id, text="–í–æ—Ç —Å—Ç–∏–∫–µ—Ä –¥–ª—è —Ç–µ–±—è! üé≠")
                else:
                    bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä —Å–µ–π—á–∞—Å üòî")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_auto
            if user_message == '/test_auto':
                self.send_auto_message(user_id)
                bot.send_message(chat_id=chat_id, text="‚ö° –¢–µ—Å—Ç –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω! –Ø –Ω–∞–ø–∏—à—É —Ç–µ–±–µ —á–µ—Ä–µ–∑ 2-5 –º–∏–Ω—É—Ç")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop_auto
            if user_message == '/stop_auto':
                self.stop_auto_messages(user_id)
                bot.send_message(chat_id=chat_id, text="üõë –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –æ–ø–ª–∞—Ç—ã
            if user_message.startswith('/start payment_success_'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                sub_status, remaining = self.check_subscription(user_id)
                
                if sub_status == "premium":
                    bot.send_message(
                        chat_id=chat_id,
                        text="‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!** üéâ\n\n–ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üí´"
                    )
                else:
                    bot.send_message(
                        chat_id=chat_id,
                        text="‚è≥ **–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...**\n\n–û–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ –º–∏–Ω—É—Ç—ã. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
                    )
                return

            # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
            if user_message == '/noway147way147no147':
                db_manager.update_subscription(user_id, 'unlimited', 30)
                bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π! üéâ"
                )
                return

            # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if user_message == '/subscribe':
                keyboard = self.create_payment_keyboard(user_id)
                bot.send_message(
                    chat_id=chat_id,
                    text="""üí´ *–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É*

üéØ **–ù–µ–¥–µ–ª—è** - 299‚ÇΩ
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí´ **–ú–µ—Å—è—Ü** - 999‚ÇΩ  
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 30%

*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!* ‚úÖ""",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                return

            # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
            if user_message == '/profile':
                sub_status, remaining = self.check_subscription(user_id)
                
                if sub_status == "free":
                    text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\nüìù –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}/5\n\nüí´ –ù–∞–ø–∏—à–∏ /subscribe –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
                elif sub_status == "premium":
                    sub_data = db_manager.get_subscription(user_id)
                    days_left = (sub_data.expires_at - datetime.now()).days
                    text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\nüìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\nüí´ –¢–∞—Ä–∏—Ñ: {sub_data.plan_type}"
                else:
                    text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\nüí´ –ù–∞–ø–∏—à–∏ /subscribe —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ!"
                
                bot.send_message(chat_id=chat_id, text=text)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sub_status, remaining = self.check_subscription(user_id)
            
            if sub_status == "expired":
                bot.send_message(
                    chat_id=chat_id,
                    text=f"""‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

üí´ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ:
‚Ä¢ –ù–µ–¥–µ–ª—è - 299‚ÇΩ
‚Ä¢ –ú–µ—Å—è—Ü - 999‚ÇΩ

–ù–∞–ø–∏—à–∏ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞!"""
                )
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–ê–ó–£
            if sub_status == "free":
                current_count = db_manager.get_message_count(user_id)
                db_manager.update_message_count(user_id, current_count + 1)
                remaining = 5 - (current_count + 1)

            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            bot.send_chat_action(chat_id=chat_id, action='typing')
            
            response = self.get_deepseek_response(user_message, user_id)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ (10% chance)
            if random.random() < 0.1:
                self.send_sticker(user_id)
            
            if sub_status == "free":
                response += f"\n\nüìù –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/5"
            
            bot.send_message(chat_id=chat_id, text=response)
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            if bot:
                bot.send_message(
                    chat_id=update.message.chat_id, 
                    text=f"{self.get_random_emotion()} –û–π, —á—Ç–æ-—Ç–æ —è –∑–∞–ø—É—Ç–∞–ª—Å—è... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? ü§ó"
                )

    def handle_callback(self, update, context):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        try:
            data = query.data
            
            if data.startswith('week_') or data.startswith('month_'):
                plan_type = data.split('_')[0]
                payment_result = self.handle_payment(user_id, plan_type)
                
                if payment_result["success"]:
                    bot.send_message(
                        chat_id=chat_id,
                        text=payment_result["message"],
                        parse_mode='Markdown',
                        disable_web_page_preview=False
                    )
                    
                    query.edit_message_text(
                        text="üí´ *–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! ‚úÖ",
                        parse_mode='Markdown',
                        reply_markup=None
                    )
                else:
                    query.edit_message_text(
                        text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='Markdown',
                        reply_markup=None
                    )
                    
            elif data.startswith('help_'):
                query.edit_message_text(
                    text="üí´ *–ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ*\n\n1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å —Ç–∞—Ä–∏—Ñ–æ–º\n2. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ–ø–ª–∞—Ç—ã\n3. –û–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ–π\n4. –í–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n*–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞:*\n`5555 5555 5555 4477`\n–°—Ä–æ–∫: 01/30, CVV: 123\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - @support",
                    parse_mode='Markdown',
                    reply_markup=None
                )
                
            elif data.startswith('cancel_'):
                query.edit_message_text(
                    text="üí´ –•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /subscribe üòä",
                    reply_markup=None
                )
                
        except Exception as e:
            logger.error(f"Callback error: {e}")
            query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )

    def get_deepseek_response(self, user_message, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API —Å –ò–°–¢–û–†–ò–ï–ô"""
        try:
            headers = {
                'Authorization': f'Bearer {DEEPSEEK_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            conversation_history = self.get_conversation_history(user_id)
            messages = [{"role": "system", "content": self.personality}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            for msg in conversation_history:
                messages.append({"role": msg["role"], "content": msg["content"]})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({"role": "user", "content": user_message})
            
            payload = {
                "model": "deepseek-chat",
                "messages": messages,
                "temperature": 0.9,
                "max_tokens": 300,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                "stream": False
            }
            
            response = requests.post(
                'https://api.deepseek.com/v1/chat/completions',
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'choices' in data and len(data['choices']) > 0:
                    ai_response = data['choices'][0]['message']['content']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.add_to_history(user_id, "user", user_message)
                    self.add_to_history(user_id, "assistant", ai_response)
                    
                    return ai_response
                else:
                    logger.error(f"DeepSeek API returned no choices: {data}")
                    return f"{self.get_random_emotion()} –ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª—Å—è... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? ü§ó"
                
            else:
                logger.error(f"DeepSeek API error: {response.status_code} - {response.text}")
                return f"{self.get_random_emotion()} –ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üí´"
                
        except requests.exceptions.Timeout:
            logger.error("DeepSeek API timeout")
            return f"{self.get_random_emotion()} –û–π, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üòÖ"
        except requests.exceptions.ConnectionError:
            logger.error("DeepSeek API connection error")
            return f"{self.get_random_emotion()} –ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? ü§ó"
        except Exception as e:
            logger.error(f"Error calling DeepSeek: {e}")
            return f"{self.get_random_emotion()} –û–π, —á—Ç–æ-—Ç–æ —è —Ä–∞—Å—Ç–µ—Ä—è–ª—Å—è... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üí´"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
virtual_boy = VirtualBoyBot()

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        return jsonify({"status": "healthy", "bot": "Virtual Boy"}), 200
    
    if request.method == 'POST':
        try:
            if not bot:
                return jsonify({"error": "Bot not configured"}), 400
            
            from telegram.ext import Dispatcher, MessageHandler, Filters, CallbackQueryHandler
            from telegram import Update
            
            update = Update.de_json(request.get_json(), bot)
            
            dp = Dispatcher(bot, None, workers=0)
            dp.add_handler(MessageHandler(Filters.text, virtual_boy.process_message))
            dp.add_handler(CallbackQueryHandler(virtual_boy.handle_callback))
            dp.process_update(update)
            
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"Error in webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 400

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    try:
        event_json = request.get_json()
        logger.info(f"Yookassa webhook received")
        
        event_type = event_json.get('event')
        payment_data = event_json.get('object', {})
        
        if event_type == 'payment.succeeded':
            metadata = payment_data.get('metadata', {})
            user_id = metadata.get('user_id')
            plan_type = metadata.get('plan_type')
            
            if user_id and plan_type:
                success = virtual_boy.activate_subscription(int(user_id), plan_type)
                
                if success:
                    logger.info(f"‚úÖ Subscription activated for user {user_id}")
                else:
                    logger.error(f"‚ùå Failed to activate subscription for user {user_id}")
                
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logger.error(f"Yookassa webhook error: {e}")
        return jsonify({"status": "error"}), 400

@app.route('/')
def home():
    return jsonify({
        "status": "healthy",
        "bot": "Virtual Boy ü§ó",
        "description": "Telegram –±–æ—Ç —Å DeepSeek –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¥–µ–≤—É—à–∫–∞–º–∏",
        "features": ["subscriptions", "deepseek", "conversation_memory", "yookassa_payments", "postgresql_database"]
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
