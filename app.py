import os
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from database import db_manager

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_IDS = [int(x) for x in os.environ.get('ADMIN_IDS', '').split(',') if x]

class BotCommands:
    def __init__(self):
        self.commands = {
            'start': 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
            'help': 'üìñ –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
            'profile': 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            'subscribe': 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            'history': 'üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤',
            'stats': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'support': 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞'
        }
    
    def get_commands_list(self):
        return "\n".join([f"/{cmd} - {desc}" for cmd, desc in self.commands.items()])

class NotificationManager:
    def __init__(self):
        self.notifications = [
            "üí° –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π!",
            "üéØ –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π? –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É!",
            "üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /history —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
            "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /support –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            "‚≠ê –ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
            "üí¨ –ß–µ–º –±–æ–ª—å—à–µ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å, —Ç–µ–º –ª—É—á—à–µ –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
        ]
    
    def get_random_notification(self):
        return random.choice(self.notifications)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot_commands = BotCommands()
notification_manager = NotificationManager()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {username}!

–Ø - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.

{bot_commands.get_commands_list()}

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!
    """
    
    await update.message.reply_text(welcome_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    db_manager.save_conversation_message(user_id, 'assistant', welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

{bot_commands.get_commands_list()}

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏ —è –æ—Ç–≤–µ—á—É
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
3. –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è 30 –¥–Ω–µ–π

üí° **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
    """
    
    await update.message.reply_text(help_text)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription = db_manager.get_subscription(user_id)
    message_count = db_manager.get_message_count(user_id)
    
    if subscription and subscription.expires_at > datetime.now():
        subscription_info = f"""
‚úÖ **–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:**
   ‚Ä¢ –¢–∏–ø: {subscription.plan_type}
   ‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}
   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {(subscription.expires_at - datetime.now()).days}
        """
    else:
        subscription_info = "‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
    
    profile_text = f"""
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**

**–ò–º—è:** {username}
**ID:** {user_id}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}

{subscription_info}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    """
    
    await update.message.reply_text(profile_text)

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ë–∞–∑–æ–≤—ã–π (7 –¥–Ω–µ–π) - 299‚ÇΩ", callback_data="subscribe_basic"),
            InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º (30 –¥–Ω–µ–π) - 999‚ÇΩ", callback_data="subscribe_premium")
        ],
        [
            InlineKeyboardButton("üöÄ PRO (90 –¥–Ω–µ–π) - 2499‚ÇΩ", callback_data="subscribe_pro"),
            InlineKeyboardButton("‚ù§Ô∏è –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π - 4999‚ÇΩ", callback_data="subscribe_lifetime")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    subscribe_text = """
üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:**

‚Ä¢ **üí∞ –ë–∞–∑–æ–≤—ã–π** - 7 –¥–Ω–µ–π –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
‚Ä¢ **üíé –ü—Ä–µ–º–∏—É–º** - 30 –¥–Ω–µ–π + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞  
‚Ä¢ **üöÄ PRO** - 90 –¥–Ω–µ–π + –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ **‚ù§Ô∏è –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π** - –í–µ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º

üéÅ **–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–∞—é—Ç:**
‚úì –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π
‚úì –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
    """
    
    await update.message.reply_text(subscribe_text, reply_markup=reply_markup)

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
    history = db_manager.get_conversation_history(user_id, limit=10)
    
    if not history:
        await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    history_text = "üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
    
    for i, msg in enumerate(history[-10:], 1):  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        role_icon = "üë§" if msg.role == 'user' else "ü§ñ"
        time = msg.timestamp.strftime('%H:%M')
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = msg.content[:100] + "..." if len(msg.content) > 100 else msg.content
        history_text += f"{role_icon} **{time}**\n{content}\n\n"
    
    await update.message.reply_text(history_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_messages = len(db_manager.db.query(db_manager.ConversationHistory).all())
    total_users = len(db_manager.db.query(db_manager.UserMessageCount).all())
    active_subscriptions = len(db_manager.db.query(db_manager.UserSubscription).filter(
        db_manager.UserSubscription.expires_at > datetime.now()
    ).all())
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%d.%m.%Y %H:%M')}
    """
    
    await update.message.reply_text(stats_text)

async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    support_text = """
üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:

üìß **Email:** support@example.com
üë®‚Äçüíª **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:** @admin_username

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 10:00 - 22:00 (–ú–°–ö)

‚ö†Ô∏è **–ü–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:**
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ (/profile)
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start

–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!
    """
    
    await update.message.reply_text(support_text)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith('subscribe_'):
        plan_type = data.replace('subscribe_', '')
        plans = {
            'basic': {'days': 7, 'price': '299‚ÇΩ'},
            'premium': {'days': 30, 'price': '999‚ÇΩ'},
            'pro': {'days': 90, 'price': '2499‚ÇΩ'},
            'lifetime': {'days': 36500, 'price': '4999‚ÇΩ'}  # ~100 –ª–µ—Ç
        }
        
        if plan_type in plans:
            plan = plans[plan_type]
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            db_manager.update_subscription(user_id, plan_type.capitalize(), plan['days'])
            
            await query.edit_message_text(
                f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!**\n\n"
                f"–¢–∏–ø: {plan_type.capitalize()}\n"
                f"–°—Ä–æ–∫: {plan['days']} –¥–Ω–µ–π\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']}\n\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º! üéâ"
            )

async def send_random_notification(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –ø–∏—Å–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
        three_days_ago = datetime.now() - timedelta(days=3)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å chat_id
        if hasattr(context, 'chat_data') and context.chat_data:
            notification = notification_manager.get_random_notification()
            await context.bot.send_message(
                chat_id=context.job.chat_id,
                text=notification
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    db_manager.save_conversation_message(user_id, 'user', user_message)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    current_count = db_manager.get_message_count(user_id)
    db_manager.update_message_count(user_id, current_count + 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription = db_manager.get_subscription(user_id)
    has_active_subscription = subscription and subscription.expires_at > datetime.now()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    if not has_active_subscription:
        if current_count >= 10:  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç - 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            await update.message.reply_text(
                "‚ùå **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!**\n\n"
                "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n/subscribe"
            )
            return
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞)
    ai_response = f"ü§ñ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{user_message}\"\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç. –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è AI-–ª–æ–≥–∏–∫–∞."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    db_manager.save_conversation_message(user_id, 'assistant', ai_response)
    
    await update.message.reply_text(ai_response)
    
    # –°–ª—É—á–∞–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (10% chance)
    if random.random() < 0.1:
        notification = notification_manager.get_random_notification()
        await update.message.reply_text(notification)

async def show_commands_suggestions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –≤–≤–æ–¥–µ '/'"""
    user_message = update.message.text
    
    if user_message == '/':
        suggestions_text = f"""
üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

{bot_commands.get_commands_list()}

–ü—Ä–æ—Å—Ç–æ –¥–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ '/' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã—à–µ.
        """
        await update.message.reply_text(suggestions_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("support", support_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.Text(['/']), show_commands_suggestions))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
