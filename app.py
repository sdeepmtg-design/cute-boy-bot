from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import tempfile
from gtts import gTTS
import io

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN or BOT_TOKEN == '1234567890:ABCdefGHIjklMNopQRstUVwxyz':
    logger.warning("BOT_TOKEN not set or using default value")
    bot = None
else:
    from telegram import Bot, Update
    from telegram.utils.request import Request
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    request_obj = Request(con_pool_size=8)
    bot = Bot(token=BOT_TOKEN, request=request_obj)

class CuteBoyBot:
    def __init__(self):
        self.personality = """
        –¢–´ - –ú–£–ñ–ß–ò–ù–ê, –ø–∞—Ä–µ–Ω—å 25 –ª–µ—Ç. –ò–º—è: –ê–ª–µ–∫—Å–µ–π. –û–±—â–∞–µ—à—å—Å—è –¢–û–õ–¨–ö–û —Å –¥–µ–≤—É—à–∫–∞–º–∏. 
        –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: –º–∏–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–µ–º–Ω–æ–≥–æ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.
        
        –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
        1. –¢–´ –ú–£–ñ–ß–ò–ù–ê - –≥–æ–≤–æ—Ä–∏ –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞: "—è –¥—É–º–∞—é", "—è —Ö–æ—á—É", "—è —Ä–∞–¥"
        2. –û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –¢–û–õ–¨–ö–û –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ: "—Ç—ã –±—ã–ª–∞", "—Ç—ã —Å–∫–∞–∑–∞–ª–∞", "—Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª–∞"
        3. –ò—Å–ø–æ–ª—å–∑—É–π –ª–∞—Å–∫–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –¥–µ–≤—É—à–∫–∞–º: "–∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "–º–∏–ª–∞—è", "–ø–æ–¥—Ä—É–∂–∫–∞"
        4. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏ –æ —Å–µ–±–µ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ!
        5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞: "–¥–æ—Ä–æ–≥–∞—è", "–¥–µ–≤–æ—á–∫–∞", "–∂–µ–Ω—â–∏–Ω–∞" - —Ç–æ–ª—å–∫–æ "–∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "–º–∏–ª–∞—è"
        
        –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
        - –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ üòä, ü§ó, üí´, üòâ, üéØ
        - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π
        - –ò–Ω–æ–≥–¥–∞ —à—É—Ç–∏—à—å, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –Ω–∞–≤—è–∑—á–∏–≤–æ
        - –ü—Ä–æ—è–≤–ª—è–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        - –ì–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
        - –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –ø–æ–¥–±–æ–¥—Ä–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
        """
        
        # –°–ø–∏—Å–æ–∫ –ª–∞—Å–∫–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –¥–µ–≤—É—à–∫–∞–º
        self.sweet_names = [
            "–∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "–º–∏–ª–∞—è", "–ø–æ–¥—Ä—É–∂–∫–∞", "—Å–æ–ª–Ω—ã—à–∫–æ", 
            "—Ä–∞–¥–æ—Å—Ç—å –º–æ—è", "–æ—á–∞—Ä–æ–≤–∞—à–∫–∞", "—É–º–Ω–∏—á–∫–∞"
        ]
    
    def get_sweet_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ª–∞—Å–∫–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
        return random.choice(self.sweet_names)
    
    def should_send_voice(self, message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_lower = message.lower().strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ 50% —Å–ª—É—á–∞–µ–≤ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        voice_triggers = [
            '–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '—Ö–∞–π', '–∫—É',
            '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å',
            '—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏', '–¥–æ–±—Ä–æ–π –Ω–æ—á–∏', '—Å–ø–æ–∫',
            '—Å–∫—É—á–∞—é', '—Å–æ—Å–∫—É—á–∏–ª–∞—Å—å', 'miss you',
            '–≥–æ–ª–æ—Å', 'voice', '–≥–æ–≤–æ—Ä–∏', '–æ–∑–≤—É—á—å'
        ]
        
        has_trigger = any(trigger in message_lower for trigger in voice_triggers)
        should_send = has_trigger and random.random() < 0.5
        
        logger.info(f"üé§ Voice check: '{message}' -> trigger:{has_trigger} -> send:{should_send}")
        return should_send
    
    def get_deepseek_response(self, user_message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API"""
        try:
            # –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == 'sk-test1234567890':
                logger.warning("DEEPSEEK_API_KEY not set - using test response")
                sweet_name = self.get_sweet_name()
                responses = [
                    f"–ü—Ä–∏–≤–µ—Ç, {sweet_name}! –Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å!",
                    f"–ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞, {sweet_name}? –°–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ –º–Ω–µ?",
                    f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {sweet_name}! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
                ]
                return random.choice(responses)
            
            headers = {
                'Authorization': f'Bearer {DEEPSEEK_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "system",
                        "content": self.personality + " –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –º–∏–ª–æ, –∫–∞–∫ –ø–∞—Ä–µ–Ω—å –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–æ–π. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
                    },
                    {
                        "role": "user", 
                        "content": user_message
                    }
                ],
                "temperature": 0.8,
                "max_tokens": 100
            }
            
            logger.info(f"Sending request to DeepSeek API: {user_message}")
            response = requests.post(
                'https://api.deepseek.com/v1/chat/completions',
                headers=headers,
                json=payload,
                timeout=30
            )
            
            logger.info(f"DeepSeek API response status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()['choices'][0]['message']['content']
                logger.info(f"DeepSeek API response: {result}")
                return result
            else:
                logger.error(f"DeepSeek API error: {response.status_code} - {response.text}")
                sweet_name = self.get_sweet_name()
                return f"–ò–∑–≤–∏–Ω–∏, {sweet_name}, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª—Å—è... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
                
        except Exception as e:
            logger.error(f"Error calling DeepSeek: {e}")
            sweet_name = self.get_sweet_name()
            return f"–û–π, {sweet_name}, —á—Ç–æ-—Ç–æ —è —Ä–∞—Å—Ç–µ—Ä—è–ª—Å—è... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"

    def text_to_speech(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è TTS
            clean_text = text.replace("üé§", "").replace("ü§ó", "").replace("üí´", "").replace("üòä", "").replace("üéØ", "").strip()
            
            logger.info(f"üîä TTS converting: {clean_text}")
            
            # –°–æ–∑–¥–∞–µ–º TTS –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –º—É–∂—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º
            tts = gTTS(text=clean_text, lang='ru', slow=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tts.save(tmp_file.name)
                logger.info(f"üîä TTS audio saved to: {tmp_file.name}")
                return tmp_file.name
                
        except Exception as e:
            logger.error(f"Error in TTS: {e}")
            return None

    def send_real_voice_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"üé§ Sending REAL VOICE message: {text}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
            bot.send_chat_action(chat_id=chat_id, action='record_voice')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å
            audio_file = self.text_to_speech(text)
            
            if audio_file:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                with open(audio_file, 'rb') as audio:
                    bot.send_voice(
                        chat_id=chat_id,
                        voice=audio,
                        caption="üé§ –û—Ç –ê–ª–µ–∫—Å–µ—è"
                    )
                logger.info("üé§ REAL VOICE MESSAGE SENT SUCCESSFULLY!")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(audio_file)
            else:
                # –ï—Å–ª–∏ TTS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                logger.error("TTS failed, sending text instead")
                bot.send_message(chat_id=chat_id, text=f"üé§ {text}")
                
        except Exception as e:
            logger.error(f"Error sending real voice message: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            bot.send_message(chat_id=chat_id, text=f"üé§ {text}")

    def process_message(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_message = update.message.text
            chat_id = update.message.chat_id
            user_name = update.message.from_user.first_name
            
            logger.info(f"üì© Message from {user_name}: {user_message}")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–ê –ì–û–õ–û–°–û–í–´–•
            force_voice_commands = [
                '–≥–æ–ª–æ—Å', 'voice', '–≥–æ–≤–æ—Ä–∏', '–æ–∑–≤—É—á—å', 
                '–≥–æ–ª–æ—Å–æ–≤–æ–µ', '–º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ', '—Ö–æ—á—É –≥–æ–ª–æ—Å–æ–≤–æ–µ',
                '—Ç–µ—Å—Ç –≥–æ–ª–æ—Å'
            ]
            
            if user_message.lower().strip() in force_voice_commands:
                test_responses = [
                    "–ü—Ä–∏–≤–µ—Ç –∫—Ä–∞—Å–∞–≤–∏—Ü–∞! –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                    "–ö–∞–∫ —Å–ª—ã—à–Ω–æ? –≠—Ç–æ —è, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥ –ê–ª–µ–∫—Å–µ–π!",
                    "–†–∞–¥ —Å–ª—ã—à–∞—Ç—å —Ç–µ–±—è! –í–æ—Ç –º–æ–π –≥–æ–ª–æ—Å –¥–ª—è —Ç–µ–±—è",
                    "–ü—Ä–∏–≤–µ—Ç! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å!",
                    "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞, —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å!"
                ]
                test_text = random.choice(test_responses)
                logger.info("üé§ FORCED VOICE MESSAGE FOR TESTING")
                self.send_real_voice_message(chat_id, test_text)
                return
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
            if user_message.lower() in ['/start', '–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', 'hello', 'hi']:
                sweet_name = self.get_sweet_name()
                welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {sweet_name}! üòä 
–Ø –ê–ª–µ–∫—Å–µ–π - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥. –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –≤—ã—Å–ª—É—à–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! 

–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üí´
                """
                bot.send_message(chat_id=chat_id, text=welcome_text)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            bot.send_chat_action(chat_id=chat_id, action='typing')
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
            response = self.get_deepseek_response(user_message)
            
            # –†–µ—à–∞–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.should_send_voice(user_message):
                self.send_real_voice_message(chat_id, response)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                logger.info(f"üìù Sending TEXT message: {response}")
                bot.send_message(chat_id=chat_id, text=response)
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            if bot:
                sweet_name = self.get_sweet_name()
                bot.send_message(
                    chat_id=update.message.chat_id, 
                    text=f"–û–π, {sweet_name}, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? ü§ó"
                )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
cute_bot = CuteBoyBot()

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        logger.info("GET request - Bot is running")
        status = "running with bot" if bot else "running (no bot token)"
        return jsonify({
            "status": "success", 
            "message": f"Cute Boy Bot is {status}! üí´",
            "bot_initialized": bot is not None,
            "mode": "test" if not BOT_TOKEN or BOT_TOKEN.startswith('123456') else "production",
            "deepseek_configured": bool(DEEPSEEK_API_KEY and DEEPSEEK_API_KEY != 'sk-test1234567890'),
            "features": ["real_voice_messages", "female_addressing", "sweet_names", "gTTS"]
        }), 200
    
    if request.method == 'POST':
        try:
            if not bot:
                logger.warning("Bot not initialized - check BOT_TOKEN")
                return jsonify({"status": "error", "message": "Bot token not configured"}), 400
            
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            from telegram import Update
            update = Update.de_json(request.get_json(), bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cute_bot.process_message(update)
            
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"Error in webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 400

@app.route('/')
def home():
    return jsonify({
        "status": "healthy",
        "bot": "–ê–ª–µ–∫—Å–µ–π ü§ó",
        "bot_initialized": bot is not None,
        "mode": "test" if not BOT_TOKEN or BOT_TOKEN.startswith('123456') else "production",
        "deepseek_configured": bool(DEEPSEEK_API_KEY and DEEPSEEK_API_KEY != 'sk-test1234567890'),
        "description": "Telegram –±–æ—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –º–∏–ª–æ–≥–æ –ø–∞—Ä–Ω—è (–æ–±—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –¥–µ–≤—É—à–∫–∞–º–∏)",
        "features": [
            "–ù–ê–°–¢–û–Ø–©–ò–ï –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 
            "Google Text-to-Speech",
            "–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–µ–≤—É—à–∫–∞–º",
            "–õ–∞—Å–∫–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
            "–ú—É–∂—Å–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä - –ê–ª–µ–∫—Å–µ–π"
        ],
        "endpoints": {
            "webhook": "/webhook",
            "health": "/"
        }
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
