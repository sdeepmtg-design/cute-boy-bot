from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import tempfile
from gtts import gTTS
import io

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN or BOT_TOKEN == '1234567890:ABCdefGHIjklMNopQRstUVwxyz':
    logger.warning("BOT_TOKEN not set or using default value")
    bot = None
else:
    from telegram import Bot, Update
    from telegram.utils.request import Request
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    request_obj = Request(con_pool_size=8)
    bot = Bot(token=BOT_TOKEN, request=request_obj)

class CuteBoyBot:
    def __init__(self):
        self.personality = """
        –¢–´ - –ú–£–ñ–ß–ò–ù–ê, –ø–∞—Ä–µ–Ω—å 25 –ª–µ—Ç. –ò–º—è: –ê–ª–µ–∫—Å–µ–π. –û–±—â–∞–µ—à—å—Å—è –¢–û–õ–¨–ö–û —Å –¥–µ–≤—É—à–∫–∞–º–∏. 
        –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: –º–∏–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–µ–º–Ω–æ–≥–æ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.
        """
        
        self.sweet_names = [
            "–∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "–º–∏–ª–∞—è", "–ø–æ–¥—Ä—É–∂–∫–∞", "—Å–æ–ª–Ω—ã—à–∫–æ", 
            "—Ä–∞–¥–æ—Å—Ç—å –º–æ—è", "–æ—á–∞—Ä–æ–≤–∞—à–∫–∞", "—É–º–Ω–∏—á–∫–∞"
        ]
    
    def get_sweet_name(self):
        return random.choice(self.sweet_names)
    
    def should_send_voice(self, message):
        message_lower = message.lower().strip()
        
        voice_triggers = [
            '–≥–æ–ª–æ—Å', 'voice', '–≥–æ–≤–æ—Ä–∏', '–æ–∑–≤—É—á—å', '—Ç–µ—Å—Ç –≥–æ–ª–æ—Å'
        ]
        
        has_trigger = any(trigger in message_lower for trigger in voice_triggers)
        should_send = has_trigger
        
        logger.info(f"üé§ Voice check: '{message}' -> trigger:{has_trigger} -> send:{should_send}")
        return should_send
    
    def get_deepseek_response(self, user_message):
        try:
            if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == 'sk-test1234567890':
                sweet_name = self.get_sweet_name()
                return f"–ü—Ä–∏–≤–µ—Ç, {sweet_name}! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."
            
            headers = {
                'Authorization': f'Bearer {DEEPSEEK_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "system",
                        "content": self.personality
                    },
                    {
                        "role": "user", 
                        "content": user_message
                    }
                ],
                "temperature": 0.8,
                "max_tokens": 100
            }
            
            response = requests.post(
                'https://api.deepseek.com/v1/chat/completions',
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                sweet_name = self.get_sweet_name()
                return f"–ò–∑–≤–∏–Ω–∏, {sweet_name}, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª—Å—è..."
                
        except Exception as e:
            sweet_name = self.get_sweet_name()
            return f"–û–π, {sweet_name}, —á—Ç–æ-—Ç–æ —è —Ä–∞—Å—Ç–µ—Ä—è–ª—Å—è..."

    def text_to_speech(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å"""
        try:
            clean_text = text.replace("üé§", "").replace("ü§ó", "").replace("üí´", "").replace("üòä", "").replace("üéØ", "").strip()
            
            logger.info(f"üîä TTS converting: {clean_text}")
            
            # –ü—Ä–æ–±—É–µ–º gTTS
            tts = gTTS(text=clean_text, lang='ru', slow=False)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tts.save(tmp_file.name)
                logger.info(f"üîä TTS audio saved to: {tmp_file.name}")
                return tmp_file.name
                
        except Exception as e:
            logger.error(f"‚ùå TTS ERROR: {e}")
            return None

    def send_real_voice_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"üé§ Attempting to send REAL VOICE: {text}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
            bot.send_chat_action(chat_id=chat_id, action='record_voice')
            
            # –ü—Ä–æ–±—É–µ–º TTS
            audio_file = self.text_to_speech(text)
            
            if audio_file and os.path.exists(audio_file):
                file_size = os.path.getsize(audio_file)
                logger.info(f"üîä Audio file created: {audio_file}, size: {file_size} bytes")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                with open(audio_file, 'rb') as audio:
                    bot.send_voice(
                        chat_id=chat_id,
                        voice=audio,
                        caption="üé§ –û—Ç –ê–ª–µ–∫—Å–µ—è"
                    )
                logger.info("‚úÖ REAL VOICE MESSAGE SENT SUCCESSFULLY!")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(audio_file)
            else:
                logger.error("‚ùå TTS failed or file not created")
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                bot.send_message(chat_id=chat_id, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ. –¢–µ–∫—Å—Ç: {text}")
                
        except Exception as e:
            logger.error(f"‚ùå Error sending real voice message: {e}")
            bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")

    def process_message(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_message = update.message.text
            chat_id = update.message.chat_id
            user_name = update.message.from_user.first_name
            
            logger.info(f"üì© Message from {user_name}: {user_message}")
            
            # –¢–û–õ–¨–ö–û —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö
            if user_message.lower().strip() in ['–≥–æ–ª–æ—Å', 'voice', '–≥–æ–≤–æ—Ä–∏', '–æ–∑–≤—É—á—å', '—Ç–µ—Å—Ç –≥–æ–ª–æ—Å']:
                test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–∞–∫ —Å–ª—ã—à–Ω–æ?"
                logger.info("üé§ FORCED VOICE MESSAGE FOR TESTING")
                self.send_real_voice_message(chat_id, test_text)
                return
            
            # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            bot.send_chat_action(chat_id=chat_id, action='typing')
            response = self.get_deepseek_response(user_message)
            bot.send_message(chat_id=chat_id, text=response)
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
cute_bot = CuteBoyBot()

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        return jsonify({"status": "running"}), 200
    
    if request.method == 'POST':
        try:
            if not bot:
                return jsonify({"error": "Bot not configured"}), 400
            
            from telegram import Update
            update = Update.de_json(request.get_json(), bot)
            cute_bot.process_message(update)
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"Error in webhook: {e}")
            return jsonify({"status": "error"}), 400

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
