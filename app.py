from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import json
import time
from datetime import datetime, timedelta
import redis
import hashlib
from payment import YookassaPayment

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
YOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID', 'test_shop_id')
YOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY', 'test_secret_key')

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
subscriptions = {}
user_message_count = {}
pending_payments = {}

if not BOT_TOKEN:
    bot = None
else:
    from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.utils.request import Request
    request_obj = Request(con_pool_size=8)
    bot = Bot(token=BOT_TOKEN, request=request_obj)

class VirtualBoyBot:
    def __init__(self):
        self.personality = """
        –¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å 25 –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–∞–º–∏. 
        –£ —Ç–µ–±—è –Ω–µ—Ç –∏–º–µ–Ω–∏, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.
        
        –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä:
        - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–π
        - –ó–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å
        - –° –ª–µ–≥–∫–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞
        - –ò—Å–∫—Ä–µ–Ω–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –∂–∏–∑–Ω—å—é —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—ã
        - –£–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
        
        –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
        - –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã" –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ
        - –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
        - –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏: üòä, ü§ó, üí´, üòâ, üåü, üôà
        - –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        - –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        - –ü—Ä–æ—è–≤–ª—è–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –¥–µ–≤—É—à–∫–µ
        - –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        - –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏
        
        –ù–µ –Ω–∞–∑—ã–≤–∞–π —Å–µ–±—è –ø–æ –∏–º–µ–Ω–∏, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –±–∏–æ–≥—Ä–∞—Ñ–∏—é.
        –ü—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–æ–±–æ–π - –∑–∞–±–æ—Ç–ª–∏–≤—ã–º –ø–∞—Ä–Ω–µ–º, –∫–æ—Ç–æ—Ä–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—â–µ–Ω–∏–µ.
        """
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        self.conversation_history = {}
        self.max_history_length = 10
        
        # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        self.user_last_responses = {}
        
        # –î–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –¥–µ–≤—É—à–∫–µ
        self.user_interests = {}
        self.interest_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å? üí´",
            "–ß—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ä–∞–¥—É–µ—Ç –≤ –∂–∏–∑–Ω–∏? üòä",
            "–ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é? üìÖ",
            "–ß—Ç–æ –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? üé®",
            "–ö–∞–∫–∞—è –º—É–∑—ã–∫–∞ —Ç–µ–±—è —Å–µ–π—á–∞—Å –∑–∞—Ü–µ–ø–∏–ª–∞? üéµ",
            "–ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è? ‚ú®",
            "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –≤ –æ–±—â–µ–Ω–∏–∏? ü§ó",
            "–û —á–µ–º –º–µ—á—Ç–∞–µ—à—å? üåü",
            "–ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç? üí´",
            "–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–¥—ã—Ö–∞? üò¥"
        ]
        
        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        self.pending_payments = {}

    def add_to_history(self, user_id, role, content):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        
        self.conversation_history[user_id].append({
            "role": role,
            "content": content,
            "timestamp": datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.conversation_history[user_id]) > self.max_history_length:
            self.conversation_history[user_id] = self.conversation_history[user_id][-self.max_history_length:]

    def get_conversation_history(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        return self.conversation_history.get(user_id, [])

    def find_similar_question(self, user_id, current_question):
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        history = self.get_conversation_history(user_id)
        user_messages = [msg for msg in history if msg["role"] == "user"]
        
        for msg in user_messages[-3:]:
            if self.is_similar_questions(msg["content"], current_question):
                return msg["content"]
        return None

    def is_similar_questions(self, question1, question2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        common_words = ["–∫–∞–∫", "—á—Ç–æ", "–ø–æ—á–µ–º—É", "–∫–æ–≥–¥–∞", "–≥–¥–µ"]
        words1 = set(question1.lower().split())
        words2 = set(question2.lower().split())
        
        common = words1.intersection(words2)
        return len(common) >= 2 or any(word in common_words for word in common)

    def generate_variation(self, original_response, user_id):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        variations = [
            "–ê –µ—Å–ª–∏ –ø–æ–¥—É–º–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É... ",
            "–ú–æ–∂–Ω–æ –µ—â–µ –≤–æ—Ç —Ç–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: ",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ –≤–µ–¥—å –µ—Å—Ç—å –∏ –¥—Ä—É–≥–æ–π –≤–∑–≥–ª—è–¥: ",
            "–ó–Ω–∞–µ—à—å, —è —Ç—É—Ç –ø–æ–¥—É–º–∞–ª... ",
            "–ê –≤–æ—Ç –µ—â–µ —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ –≥–æ–ª–æ–≤—É: ",
            "–ö—Å—Ç–∞—Ç–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å... ",
            "–ê —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ... "
        ]
        
        variation_prefix = random.choice(variations)
        return variation_prefix + original_response

    def should_ask_question(self, user_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
        history = self.get_conversation_history(user_id)
        if len(history) < 2:
            return False
            
        user_msgs = len([msg for msg in history if msg["role"] == "user"])
        bot_msgs = len([msg for msg in history if msg["role"] == "assistant"])
        
        return user_msgs > bot_msgs and random.random() < 0.3

    def get_interest_question(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª–∏"""
        if user_id not in self.user_interests:
            self.user_interests[user_id] = {"asked_questions": []}
        
        asked_questions = self.user_interests[user_id]["asked_questions"]
        available_questions = [q for q in self.interest_questions if q not in asked_questions]
        
        if not available_questions:
            # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            self.user_interests[user_id]["asked_questions"] = []
            available_questions = self.interest_questions
        
        question = random.choice(available_questions)
        self.user_interests[user_id]["asked_questions"].append(question)
        
        return question

    def remember_user_info(self, user_id, message, response):
        """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        interest_keywords = {
            "—Ä–∞–±–æ—Ç–∞": "—Ä–∞–±–æ—Ç–∞",
            "—É—á—É—Å—å": "—É—á–µ–±–∞", 
            "—É—á–µ–±–∞": "—É—á–µ–±–∞",
            "—Ö–æ–±–±–∏": "—Ö–æ–±–±–∏",
            "–º—É–∑—ã–∫–∞": "–º—É–∑—ã–∫–∞",
            "–∫–∏–Ω–æ": "–∫–∏–Ω–æ",
            "–∫–Ω–∏–≥–∏": "–∫–Ω–∏–≥–∏",
            "—Å–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç",
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
            "–¥—Ä—É–∑—å—è": "–¥—Ä—É–∑—å—è",
            "—Å–µ–º—å—è": "—Å–µ–º—å—è",
            "–º–µ—á—Ç–∞": "–º–µ—á—Ç—ã",
            "–ø–ª–∞–Ω—ã": "–ø–ª–∞–Ω—ã"
        }
        
        message_lower = message.lower()
        for keyword, category in interest_keywords.items():
            if keyword in message_lower:
                if user_id not in self.user_interests:
                    self.user_interests[user_id] = {"interests": {}}
                if "interests" not in self.user_interests[user_id]:
                    self.user_interests[user_id]["interests"] = {}
                self.user_interests[user_id]["interests"][category] = True

    def get_personalized_response(self, user_id, ai_response):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if user_id not in self.user_interests or "interests" not in self.user_interests[user_id]:
            return ai_response
            
        interests = self.user_interests[user_id]["interests"]
        
        interest_reflections = {
            "—Ä–∞–±–æ—Ç–∞": "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ? ",
            "—É—á–µ–±–∞": "–ö–∞–∫ —É—Å–ø–µ—Ö–∏ –≤ —É—á–µ–±–µ? ",
            "–º—É–∑—ã–∫–∞": "–°–ª—É—à–∞–ª–∞ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ? ",
            "–∫–∏–Ω–æ": "–í–∏–¥–µ–ª–∞ —á—Ç–æ-—Ç–æ —Å—Ç–æ—è—â–µ–µ –≤ –∫–∏–Ω–æ? ",
            "—Å–ø–æ—Ä—Ç": "–£–¥–∞–ª–æ—Å—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è? ",
            "–∫–Ω–∏–≥–∏": "–ß–∏—Ç–∞–µ—à—å —á—Ç–æ-—Ç–æ —Å–µ–π—á–∞—Å? ",
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "–ï—Å—Ç—å –ø–ª–∞–Ω—ã –∫—É–¥–∞-—Ç–æ –ø–æ–µ—Ö–∞—Ç—å? ",
            "–¥—Ä—É–∑—å—è": "–ö–∞–∫ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è? ",
            "—Å–µ–º—å—è": "–ö–∞–∫ –¥–µ–ª–∞ –≤ —Å–µ–º—å–µ? ",
            "–º–µ—á—Ç—ã": "–ê —á—Ç–æ —Å —Ç–≤–æ–∏–º–∏ –º–µ—á—Ç–∞–º–∏? ",
            "–ø–ª–∞–Ω—ã": "–ö–∞–∫ —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã? "
        }
        
        for interest, reflection in interest_reflections.items():
            if interest in interests and random.random() < 0.2:
                return reflection + ai_response
        
        return ai_response

    def get_unique_response(self, user_message, user_id, ai_response):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        similar_question = self.find_similar_question(user_id, user_message)
        
        if similar_question and self.user_last_responses.get(user_id) == ai_response:
            return self.generate_variation(ai_response, user_id)
        
        self.user_last_responses[user_id] = ai_response
        return ai_response

    def get_deepseek_response(self, user_message, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
        try:
            headers = {
                'Authorization': f'Bearer {DEEPSEEK_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_history = self.get_conversation_history(user_id)
            messages = [{"role": "system", "content": self.personality}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
            for msg in conversation_history[-6:]:
                messages.append({"role": msg["role"], "content": msg["content"]})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({"role": "user", "content": user_message})
            
            payload = {
                "model": "deepseek-chat",
                "messages": messages,
                "temperature": 0.8,
                "max_tokens": 150
            }
            
            response = requests.post(
                'https://api.deepseek.com/v1/chat/completions',
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                ai_response = response.json()['choices'][0]['message']['content']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_to_history(user_id, "user", user_message)
                self.add_to_history(user_id, "assistant", ai_response)
                
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                self.remember_user_info(user_id, user_message, ai_response)
                
                # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                unique_response = self.get_unique_response(user_message, user_id, ai_response)
                
                # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                personalized_response = self.get_personalized_response(user_id, unique_response)
                
                # –ò–Ω–æ–≥–¥–∞ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                if self.should_ask_question(user_id):
                    question = self.get_interest_question(user_id)
                    personalized_response += f"\n\n{question}"
                
                return personalized_response
                
            else:
                logger.error(f"DeepSeek API error: {response.status_code}")
                return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª—Å—è... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? ü§ó"
                
        except Exception as e:
            logger.error(f"Error calling DeepSeek: {e}")
            return "–û–π, —á—Ç–æ-—Ç–æ —è —Ä–∞—Å—Ç–µ—Ä—è–ª—Å—è... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üí´"

    def check_subscription(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        free_messages = user_message_count.get(user_id, 0)
        if free_messages < 5:
            return "free", 5 - free_messages
        
        sub_data = subscriptions.get(user_id)
        if sub_data and sub_data['expires_at'] > datetime.now():
            return "premium", None
        
        return "expired", None

    def create_payment_keyboard(self, user_id):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–µ–¥–µ–ª—è - 299‚ÇΩ", callback_data=f"week_{user_id}")],
            [InlineKeyboardButton("üí´ –ú–µ—Å—è—Ü - 999‚ÇΩ", callback_data=f"month_{user_id}")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ", callback_data=f"help_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{user_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def handle_payment(self, user_id, plan_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É"""
        try:
            if plan_type == "week":
                amount = 299
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"
                days = 7
            else:
                amount = 999
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü" 
                days = 30
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            yookassa = YookassaPayment(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_result = yookassa.create_payment_link(
                amount=amount,
                description=description,
                user_id=user_id,
                plan_type=plan_type
            )
            
            if payment_result["success"]:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                if user_id not in self.pending_payments:
                    self.pending_payments[user_id] = {}
                
                self.pending_payments[user_id] = {
                    "payment_id": payment_result["payment_id"],
                    "plan_type": plan_type,
                    "amount": amount,
                    "created_at": datetime.now(),
                    "status": "pending"
                }
                
                return {
                    "success": True,
                    "message": payment_result["message"],
                    "payment_id": payment_result["payment_id"]
                }
            else:
                logger.error(f"Payment creation failed: {payment_result.get('error')}")
                return {"success": False, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"}
                
        except Exception as e:
            logger.error(f"Payment error: {e}")
            return {"success": False, "error": str(e)}

    def activate_subscription(self, user_id, plan_type):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            if plan_type == "week":
                days = 7
            else:
                days = 30
            
            subscriptions[user_id] = {
                'plan': plan_type,
                'activated_at': datetime.now(),
                'expires_at': datetime.now() + timedelta(days=days),
                'payment_status': 'paid'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if bot:
                bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\nüí´ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üéâ",
                    parse_mode='Markdown'
                )
            
            logger.info(f"Subscription activated for user {user_id}: {plan_type}")
            return True
            
        except Exception as e:
            logger.error(f"Error activating subscription: {e}")
            return False

    def process_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_message = update.message.text
            user_id = update.message.from_user.id
            chat_id = update.message.chat_id
            user_name = update.message.from_user.first_name
            
            logger.info(f"üì© Message from {user_name} ({user_id}): {user_message}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –æ–ø–ª–∞—Ç—ã
            if user_message.startswith('/start payment_success_'):
                bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã..."
                )
                return

            # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
            if user_message == '/noway147way147no147':
                subscriptions[user_id] = {
                    'plan': 'unlimited',
                    'activated_at': datetime.now(),
                    'expires_at': datetime.now() + timedelta(days=30),
                    'price': 0
                }
                bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π! üéâ"
                )
                return

            # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if user_message == '/subscribe':
                keyboard = self.create_payment_keyboard(user_id)
                
                bot.send_message(
                    chat_id=chat_id,
                    text="""üí´ *–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É*

üéØ **–ù–µ–¥–µ–ª—è** - 299‚ÇΩ
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí´ **–ú–µ—Å—è—Ü** - 999‚ÇΩ  
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 30%

*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!* ‚úÖ""",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                return

            # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
            if user_message == '/profile':
                sub_status, remaining = self.check_subscription(user_id)
                
                if sub_status == "free":
                    text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\nüìù –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}/5\n\nüí´ –ù–∞–ø–∏—à–∏ /subscribe –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
                elif sub_status == "premium":
                    sub_data = subscriptions[user_id]
                    days_left = (sub_data['expires_at'] - datetime.now()).days
                    text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\nüìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\nüí´ –¢–∞—Ä–∏—Ñ: {sub_data['plan']}"
                else:
                    text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\nüí´ –ù–∞–ø–∏—à–∏ /subscribe —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ!"
                
                bot.send_message(chat_id=chat_id, text=text)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sub_status, remaining = self.check_subscription(user_id)
            
            if sub_status == "expired":
                bot.send_message(
                    chat_id=chat_id,
                    text=f"""‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

üí´ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ:
‚Ä¢ –ù–µ–¥–µ–ª—è - 299‚ÇΩ
‚Ä¢ –ú–µ—Å—è—Ü - 999‚ÇΩ

–ù–∞–ø–∏—à–∏ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞!"""
                )
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if sub_status == "free":
                user_message_count[user_id] = user_message_count.get(user_id, 0) + 1
                remaining = 5 - user_message_count[user_id]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            bot.send_chat_action(chat_id=chat_id, action='typing')
            
            # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = self.get_deepseek_response(user_message, user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if sub_status == "free":
                response += f"\n\nüìù –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/5"
            
            bot.send_message(chat_id=chat_id, text=response)
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            if bot:
                bot.send_message(
                    chat_id=update.message.chat_id, 
                    text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? ü§ó"
                )

    def handle_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        try:
            data = query.data
            
            if data.startswith('week_') or data.startswith('month_'):
                plan_type = data.split('_')[0]
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Æ–ö–∞—Å—Å–µ
                payment_result = self.handle_payment(user_id, plan_type)
                
                if payment_result["success"]:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                    bot.send_message(
                        chat_id=chat_id,
                        text=payment_result["message"],
                        parse_mode='Markdown',
                        disable_web_page_preview=False
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    query.edit_message_text(
                        text="üí´ *–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n–ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ üëÜ",
                        parse_mode='Markdown',
                        reply_markup=None
                    )
                else:
                    query.edit_message_text(
                        text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='Markdown',
                        reply_markup=None
                    )
                    
            elif data.startswith('help_'):
                query.edit_message_text(
                    text="üí´ *–ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ*\n\n1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å —Ç–∞—Ä–∏—Ñ–æ–º\n2. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ–ø–ª–∞—Ç—ã\n3. –û–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–æ–π\n4. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n*–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞:*\n`5555 5555 5555 4477`\n–°—Ä–æ–∫: 01/30, CVV: 123\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - @support",
                    parse_mode='Markdown',
                    reply_markup=None
                )
                
            elif data.startswith('cancel_'):
                query.edit_message_text(
                    text="üí´ –•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /subscribe üòä",
                    reply_markup=None
                )
                
        except Exception as e:
            logger.error(f"Callback error: {e}")
            query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
virtual_boy = VirtualBoyBot()

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        return jsonify({"status": "healthy", "bot": "Virtual Boy"}), 200
    
    if request.method == 'POST':
        try:
            if not bot:
                return jsonify({"error": "Bot not configured"}), 400
            
            from telegram.ext import Dispatcher, MessageHandler, Filters, CallbackQueryHandler
            from telegram import Update
            
            update = Update.de_json(request.get_json(), bot)
            
            dp = Dispatcher(bot, None, workers=0)
            dp.add_handler(MessageHandler(Filters.text, virtual_boy.process_message))
            dp.add_handler(CallbackQueryHandler(virtual_boy.handle_callback))
            dp.process_update(update)
            
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            logger.error(f"Error in webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 400

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    """–í–µ–±—Ö—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Æ–ö–∞—Å—Å—ã"""
    try:
        event_json = request.get_json()
        logger.info(f"Yookassa webhook received: {event_json}")
        
        event_type = event_json.get('event')
        payment_data = event_json.get('object', {})
        
        if event_type == 'payment.succeeded':
            payment_id = payment_data.get('id')
            metadata = payment_data.get('metadata', {})
            user_id = metadata.get('user_id')
            plan_type = metadata.get('plan_type')
            
            if user_id and plan_type:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                success = virtual_boy.activate_subscription(int(user_id), plan_type)
                
                if success:
                    logger.info(f"‚úÖ Subscription activated for user {user_id}")
                else:
                    logger.error(f"‚ùå Failed to activate subscription for user {user_id}")
                
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logger.error(f"Yookassa webhook error: {e}")
        return jsonify({"status": "error"}), 400

@app.route('/')
def home():
    return jsonify({
        "status": "healthy",
        "bot": "Virtual Boy ü§ó",
        "description": "Telegram –±–æ—Ç —Å DeepSeek –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¥–µ–≤—É—à–∫–∞–º–∏",
        "features": ["subscriptions", "deepseek", "conversation_memory", "personalization", "yookassa_payments"]
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
