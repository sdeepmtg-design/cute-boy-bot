from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import tempfile
from gtts import gTTS
import io

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

if not BOT_TOKEN:
    bot = None
else:
    from telegram import Bot, Update
    from telegram.utils.request import Request
    request_obj = Request(con_pool_size=8)
    bot = Bot(token=BOT_TOKEN, request=request_obj)

class CuteBoyBot:
    def __init__(self):
        self.sweet_names = ["–∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "–º–∏–ª–∞—è", "–ø–æ–¥—Ä—É–∂–∫–∞", "—Å–æ–ª–Ω—ã—à–∫–æ"]
    
    def get_sweet_name(self):
        return random.choice(self.sweet_names)
    
    def should_send_voice(self, message):
        message_lower = message.lower().strip()
        voice_triggers = ['–≥–æ–ª–æ—Å', 'voice', '–≥–æ–≤–æ—Ä–∏', '–æ–∑–≤—É—á—å', '—Ç–µ—Å—Ç –≥–æ–ª–æ—Å']
        return any(trigger in message_lower for trigger in voice_triggers)

    def text_to_speech_improved(self, text):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π TTS —Å –ø–æ–ø—ã—Ç–∫–æ–π –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è TTS
            clean_text = text.replace("üé§", "").replace("ü§ó", "").replace("üí´", "").replace("üòä", "").replace("üéØ", "").strip()
            
            logger.info(f"üîä TTS converting: {clean_text}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:
            tts = gTTS(
                text=clean_text, 
                lang='ru',
                slow=False,  # –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä–∏–º
                lang_check=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —è–∑—ã–∫–∞
            )
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º (–∏–Ω–æ–≥–¥–∞ –ª—É—á—à–µ)
            # tts = gTTS(text=clean_text, lang='en', slow=False)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tts.save(tmp_file.name)
                logger.info(f"üîä TTS audio saved")
                return tmp_file.name
                
        except Exception as e:
            logger.error(f"‚ùå TTS ERROR: {e}")
            return None

    def send_voice_with_fallback(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º TTS"""
        try:
            logger.info(f"üé§ Sending voice: {text}")
            bot.send_chat_action(chat_id=chat_id, action='record_voice')
            
            # –ü—Ä–æ–±—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π TTS
            audio_file = self.text_to_speech_improved(text)
            
            if audio_file and os.path.exists(audio_file):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
                with open(audio_file, 'rb') as audio:
                    bot.send_voice(
                        chat_id=chat_id,
                        voice=audio,
                        caption="üé§ –ê–ª–µ–∫—Å–µ–π"
                    )
                logger.info("‚úÖ Voice sent!")
                os.unlink(audio_file)
            else:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
                bot.send_message(
                    chat_id=chat_id, 
                    text=f"üé§ {text}\n\n(–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî)"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Voice error: {e}")
            bot.send_message(chat_id=chat_id, text=text)

    def process_message(self, update):
        try:
            user_message = update.message.text
            chat_id = update.message.chat_id
            
            logger.info(f"üì© Message: {user_message}")
            
            # –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö
            if self.should_send_voice(user_message):
                test_messages = [
                    "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–∫—Å–µ–π, —Ä–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å",
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è",
                    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ"
                ]
                test_text = random.choice(test_messages)
                self.send_voice_with_fallback(chat_id, test_text)
                return
            
            # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if bot:
                sweet_name = self.get_sweet_name()
                responses = [
                    f"–ü—Ä–∏–≤–µ—Ç, {sweet_name}! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? ü§ó",
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {sweet_name}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üí´",
                    f"–ü—Ä–∏–≤–µ—Ç, {sweet_name}! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? üòä"
                ]
                bot.send_message(chat_id=chat_id, text=random.choice(responses))

        except Exception as e:
            logger.error(f"Error: {e}")

cute_bot = CuteBoyBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    if not bot:
        return jsonify({"error": "Bot not configured"}), 400
    
    try:
        from telegram import Update
        update = Update.de_json(request.get_json(), bot)
        cute_bot.process_message(update)
        return jsonify({"status": "success"}), 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"status": "error"}), 400

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
