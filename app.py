from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import tempfile
import uuid
import hashlib
import time

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
YANDEX_API_KEY = os.environ.get('YANDEX_API_KEY')  # –ö–ª—é—á –æ—Ç –Ø–Ω–¥–µ–∫—Å Cloud
YANDEX_FOLDER_ID = os.environ.get('YANDEX_FOLDER_ID')  # Folder ID –∏–∑ –Ø–Ω–¥–µ–∫—Å Cloud

if not BOT_TOKEN:
    bot = None
else:
    from telegram import Bot, Update
    from telegram.utils.request import Request
    request_obj = Request(con_pool_size=8)
    bot = Bot(token=BOT_TOKEN, request=request_obj)

class CuteBoyBot:
    def __init__(self):
        self.sweet_names = ["–∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "–º–∏–ª–∞—è", "–ø–æ–¥—Ä—É–∂–∫–∞", "—Å–æ–ª–Ω—ã—à–∫–æ"]
    
    def get_sweet_name(self):
        return random.choice(self.sweet_names)
    
    def should_send_voice(self, message):
        message_lower = message.lower().strip()
        voice_triggers = ['–≥–æ–ª–æ—Å', 'voice', '–≥–æ–≤–æ—Ä–∏', '–æ–∑–≤—É—á—å', '—Ç–µ—Å—Ç –≥–æ–ª–æ—Å']
        return any(trigger in message_lower for trigger in voice_triggers)

    def yandex_text_to_speech(self, text):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ø–Ω–¥–µ–∫—Å SpeechKit –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
        try:
            if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
                logger.error("‚ùå Yandex credentials not set")
                return None
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            clean_text = text.replace("üé§", "").replace("ü§ó", "").replace("üí´", "").replace("üòä", "").replace("üéØ", "").strip()
            
            logger.info(f"üîä Yandex TTS converting: {clean_text}")
            
            # URL –¥–ª—è –Ø–Ω–¥–µ–∫—Å SpeechKit
            url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
            
            headers = {
                "Authorization": f"Api-Key {YANDEX_API_KEY}",
            }
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
            data = {
                "text": clean_text,
                "lang": "ru-RU",
                "voice": "filipp",  # –ú—É–∂—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞: filipp, ermil, alexander
                "emotion": "good",  # good, neutral, evil
                "speed": "1.0",
                "format": "mp3",
                "folderId": YANDEX_FOLDER_ID
            }
            
            response = requests.post(url, headers=headers, data=data, timeout=30)
            
            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                    tmp_file.write(response.content)
                    logger.info(f"üîä Yandex TTS success: {len(response.content)} bytes")
                    return tmp_file.name
            else:
                logger.error(f"‚ùå Yandex TTS error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Yandex TTS exception: {e}")
            return None

    def send_voice_with_yandex(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å –Ø–Ω–¥–µ–∫—Å TTS"""
        try:
            logger.info(f"üé§ Sending Yandex voice: {text}")
            bot.send_chat_action(chat_id=chat_id, action='record_voice')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ø–Ω–¥–µ–∫—Å TTS
            audio_file = self.yandex_text_to_speech(text)
            
            if audio_file and os.path.exists(audio_file):
                file_size = os.path.getsize(audio_file)
                logger.info(f"üîä Yandex audio file ready: {file_size} bytes")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
                with open(audio_file, 'rb') as audio:
                    bot.send_voice(
                        chat_id=chat_id,
                        voice=audio,
                        caption="üé§ –ê–ª–µ–∫—Å–µ–π"
                    )
                logger.info("‚úÖ Yandex voice sent successfully!")
                os.unlink(audio_file)
            else:
                # Fallback –Ω–∞ Google TTS
                logger.warning("üîÑ Yandex TTS failed, falling back to gTTS")
                self.send_voice_with_gtts(chat_id, text)
                
        except Exception as e:
            logger.error(f"‚ùå Voice sending error: {e}")
            bot.send_message(chat_id=chat_id, text=f"üé§ {text}")

    def send_voice_with_gtts(self, chat_id, text):
        """Fallback –Ω–∞ Google TTS"""
        try:
            from gtts import gTTS
            
            clean_text = text.replace("üé§", "").replace("ü§ó", "").replace("üí´", "").replace("üòä", "").replace("üéØ", "").strip()
            tts = gTTS(text=clean_text, lang='ru', slow=False)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                tts.save(tmp_file.name)
                
                with open(tmp_file.name, 'rb') as audio:
                    bot.send_voice(
                        chat_id=chat_id,
                        voice=audio,
                        caption="üé§ –ê–ª–µ–∫—Å–µ–π (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≥–æ–ª–æ—Å)"
                    )
                os.unlink(tmp_file.name)
                
        except Exception as e:
            logger.error(f"‚ùå gTTS fallback failed: {e}")
            bot.send_message(chat_id=chat_id, text=f"üé§ {text}")

    def process_message(self, update):
        try:
            user_message = update.message.text
            chat_id = update.message.chat_id
            
            logger.info(f"üì© Message: {user_message}")
            
            # –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö
            if self.should_send_voice(user_message):
                test_messages = [
                    "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–∫—Å–µ–π, –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å",
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?",
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è",
                    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
                ]
                test_text = random.choice(test_messages)
                
                if YANDEX_API_KEY and YANDEX_FOLDER_ID:
                    logger.info("üöÄ Using Yandex TTS")
                    self.send_voice_with_yandex(chat_id, test_text)
                else:
                    logger.info("üîÑ Yandex not configured, using gTTS")
                    self.send_voice_with_gtts(chat_id, test_text)
                return
            
            # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if bot:
                sweet_name = self.get_sweet_name()
                responses = [
                    f"–ü—Ä–∏–≤–µ—Ç, {sweet_name}! ü§ó",
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {sweet_name}! üí´",
                    f"–ü—Ä–∏–≤–µ—Ç, {sweet_name}! üòä"
                ]
                bot.send_message(chat_id=chat_id, text=random.choice(responses))

        except Exception as e:
            logger.error(f"Error: {e}")

cute_bot = CuteBoyBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    if not bot:
        return jsonify({"error": "Bot not configured"}), 400
    
    try:
        from telegram import Update
        update = Update.de_json(request.get_json(), bot)
        cute_bot.process_message(update)
        return jsonify({"status": "success"}), 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"status": "error"}), 400

@app.route('/')
def home():
    return jsonify({
        "status": "healthy",
        "tts_engine": "Yandex SpeechKit" if YANDEX_API_KEY else "Google TTS",
        "features": ["real_voice_messages", "yandex_tts"]
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
