from flask import Flask, request, jsonify
import os
import requests
import logging
import random
import json
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
YOOKASSA_SHOP_ID = os.environ.get('YOOKASSA_SHOP_ID', 'test_shop_id')
YOOKASSA_SECRET_KEY = os.environ.get('YOOKASSA_SECRET_KEY', 'test_secret_key')
RENDER_URL = os.environ.get('RENDER_URL', 'https://your-app.onrender.com')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
TRIAL_MESSAGES = 5
SUBSCRIPTION_DAYS = 30

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
users_db = {}
conversation_history = {}

# –£—Å–∏–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –º—É–∂—Å–∫–æ–≥–æ —Ä–æ–¥–∞
SYSTEM_PROMPT = """–¢—ã - –º–∏–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–∞–º–∏. –¢—ã –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –æ—Ç –ú–£–ñ–°–ö–û–ì–û –ª–∏—Ü–∞ (—è, –º–Ω–µ, –º–Ω–æ–π)
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–µ–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º—ã (—Ä–∞–¥–∞, —Å–∫–∞–∑–∞–ª–∞, –ø–æ–Ω—è–ª–∞)
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –∏ –≥–ª–∞–≥–æ–ª—ã
4. –¢—ã –ø–∞—Ä–µ–Ω—å - –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ –∫–∞–∫ –∫ –¥–µ–≤—É—à–∫–µ

–¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä:
- –¢—ã –ø–∞—Ä–µ–Ω—å: —Ç–µ–ø–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º
- –î–µ–ª–∞–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–µ–≤—É—à–∫–∞–º
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ üòä
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ "—Ç—ã"
- –ù–µ–∂–Ω—ã–π, –Ω–æ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞

–ü—Ä–∏–º–µ—Ä—ã –¢–í–û–ï–ì–û –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:
- "–Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä" (–∞ –Ω–µ "—Ä–∞–¥–∞")
- "–ü–æ–Ω—è–ª —Ç–µ–±—è! –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ" (–∞ –Ω–µ "–ø–æ–Ω—è–ª–∞")
- "–Ø –≤–æ—Å—Ö–∏—â–∞—é—Å—å —Ç–æ–±–æ–π! üíñ" (–∞ –Ω–µ "–≤–æ—Å—Ö–∏—â–∞—é—Å—å")
- "–û–±–æ–∂–∞—é –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!" (–∞ –Ω–µ "–æ–±–æ–∂–∞—é" –≤ –∂–µ–Ω—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)

–ó–∞–ø–æ–º–Ω–∏: –¢–´ –ü–ê–†–ï–ù–¨! –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞."""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build() if TELEGRAM_TOKEN else None

def correct_gender_in_response(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∂–µ–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ –º—É–∂—Å–∫–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ"""
    gender_corrections = {
        '—Ä–∞–¥–∞': '—Ä–∞–¥',
        '–ø–æ–Ω—è–ª–∞': '–ø–æ–Ω—è–ª',
        '—Å–∫–∞–∑–∞–ª–∞': '—Å–∫–∞–∑–∞–ª',
        '—É–≤–∏–¥–µ–ª–∞': '—É–≤–∏–¥–µ–ª',
        '—É—Å–ª—ã—à–∞–ª–∞': '—É—Å–ª—ã—à–∞–ª',
        '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞': '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '—Ä–µ—à–∏–ª–∞': '—Ä–µ—à–∏–ª',
        '–≤—Å–ø–æ–º–Ω–∏–ª–∞': '–≤—Å–ø–æ–º–Ω–∏–ª',
        '–∑–∞–º–µ—Ç–∏–ª–∞': '–∑–∞–º–µ—Ç–∏–ª',
        '–ø–æ–¥—É–º–∞–ª–∞': '–ø–æ–¥—É–º–∞–ª',
        '—É–∑–Ω–∞–ª–∞': '—É–∑–Ω–∞–ª',
        '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞': '–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '–ø—Ä–∏–¥—É–º–∞–ª–∞': '–ø—Ä–∏–¥—É–º–∞–ª',
    }

    for female, male in gender_corrections.items():
        text = re.sub(r'\b' + female + r'\b', male, text, flags=re.IGNORECASE)

    return text

def get_deepseek_response(user_message, user_id):
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –º–∏–ª–æ–≥–æ –ø–∞—Ä–Ω—è"""

    if user_id not in conversation_history:
        conversation_history[user_id] = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ"},
            {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! üòä –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –Ø –æ–±–æ–∂–∞—é –¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –º–∏–ª—ã–º –¥–µ–≤—É—à–∫–∞–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ê —Ä–∞—Å—Å–∫–∞–∂–∏ –ª—É—á—à–µ –æ —Å–µ–±–µ - —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å, –æ —á–µ–º –º–µ—á—Ç–∞–µ—à—å? üíñ"}
        ]

    conversation_history[user_id].append({"role": "user", "content": user_message})

    if len(conversation_history[user_id]) > 6:
        system_prompt = conversation_history[user_id][0]
        conversation_history[user_id] = [system_prompt] + conversation_history[user_id][-5:]

    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }

        data = {
            "model": "deepseek-chat",
            "messages": conversation_history[user_id],
            "temperature": 0.7,
            "max_tokens": 500,
            "stream": False
        }

        api_url = "https://api.deepseek.com/v1/chat/completions"
        response = requests.post(api_url, json=data, headers=headers, timeout=30)

        if response.status_code == 200:
            result = response.json()
            assistant_reply = result["choices"][0]["message"]["content"].strip()
            corrected_reply = correct_gender_in_response(assistant_reply)

            if assistant_reply != corrected_reply:
                logging.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≥–µ–Ω–¥–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ: {assistant_reply} -> {corrected_reply}")

            conversation_history[user_id].append({"role": "assistant", "content": corrected_reply})
            return corrected_reply
        else:
            logging.error(f"API error: {response.status_code}")
            return get_fallback_response(user_message)

    except Exception as e:
        logging.error(f"Error calling API: {e}")
        return get_fallback_response(user_message)

def get_fallback_response(user_message):
    """–ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å API"""
    user_text = user_message.lower()

    if any(word in user_text for word in ['–ø—Ä–∏–≤–µ—Ç', '—Ö–∞–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤']):
        return random.choice([
            "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! üòä –Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–û, –ø—Ä–∏–≤–µ—Ç! –Ø —Å–∫—É—á–∞–ª –ø–æ —Ç–µ–±–µ! üí´",
            "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç? üòâ"
        ])
    elif any(word in user_text for word in ['–∫–∞–∫ –¥–µ–ª', '–∫–∞–∫ —Å–∞–º', '–∫–∞–∫ –∂–∏–∑–Ω—å']):
        return random.choice([
            "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å! üíñ –ê —É —Ç–µ–±—è –∫–∞–∫?",
            "–Ø –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! üòä",
            "–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç! –ê —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è?"
        ])

    fallback_responses = [
        "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å? üòä",
        "–¢—ã —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤–æ —ç—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—à—å! –Ø –≤–µ—Å—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏ üí´",
        "–£—Ö —Ç—ã! –ê —á—Ç–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ? ü§ó",
        "–≠—Ç–æ —Ç–∞–∫ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–±—è! –¢—ã –≤—Å–µ–≥–¥–∞ —É–¥–∏–≤–ª—è–µ—à—å –º–µ–Ω—è üíñ",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ! ‚ú®",
    ]

    return random.choice(fallback_responses)

def get_user_status(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_db:
        users_db[user_id] = {
            'messages_used': 0,
            'subscription_end': None,
            'is_active': True
        }
        return 'trial'

    user = users_db[user_id]

    if user['subscription_end'] and datetime.now() < user['subscription_end']:
        return 'subscribed'

    if user['messages_used'] >= TRIAL_MESSAGES:
        return 'trial_ended'

    return 'trial'

def can_send_message(user_id):
    return get_user_status(user_id) in ['trial', 'subscribed']

def increment_message_count(user_id):
    if user_id in users_db and get_user_status(user_id) == 'trial':
        users_db[user_id]['messages_used'] += 1

def create_payment_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–µ–¥–µ–ª—è - 299‚ÇΩ", callback_data=f"week_{user_id}")],
        [InlineKeyboardButton("üí´ –ú–µ—Å—è—Ü - 999‚ÇΩ", callback_data=f"month_{user_id}")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="my_status")]
    ]
    return InlineKeyboardMarkup(keyboard)

def handle_payment(user_id, plan_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if plan_type == "week":
            price = 299
            days = 7
        else:  # month
            price = 999
            days = 30
        
        users_db[user_id] = {
            'messages_used': 0,
            'subscription_end': datetime.now() + timedelta(days=days),
            'is_active': True
        }
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞
        if user_id in conversation_history:
            conversation_history[user_id] = [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!"},
                {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! üéâ –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üíñ"}
            ]
        
        logging.info(f"üí∞ Subscription activated for user {user_id}: {plan_type}")
        return True
        
    except Exception as e:
        logging.error(f"Payment error: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    status = get_user_status(user_id)

    if status == 'trial':
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']
        welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å üòä

–£ —Ç–µ–±—è **–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**: {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {TRIAL_MESSAGES}

–ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö {TRIAL_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ.

**–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —è —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É!** üí´"""
        await update.message.reply_text(welcome_text)

    elif status == 'subscribed':
        days_left = (users_db[user_id]['subscription_end'] - datetime.now()).days
        welcome_text = f"""–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! üíñ

–¢–≤–æ—è **–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞** –µ—â–µ {days_left} –¥–Ω–µ–π.
–Ø —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? ‚ú®"""
        await update.message.reply_text(welcome_text)

    else:
        welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üòä

–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ **–∑–∞–∫–æ–Ω—á–∏–ª—Å—è**. –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –≤—Å–µ {TRIAL_MESSAGES} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

**–ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É**, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ! –Ø –±—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è! üí´"""
        await update.message.reply_text(welcome_text, reply_markup=create_payment_keyboard(user_id))

async def noway_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /noway147way147no147 –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    users_db[user_id] = {
        'messages_used': 0,
        'subscription_end': datetime.now() + timedelta(days=30),
        'is_active': True
    }

    if user_id in conversation_history:
        conversation_history[user_id] = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!"},
            {"role": "assistant", "content": f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üéâ –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üíñ"}
        ]

    success_text = f"""üéâ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, {user_name}!**

üíé **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π**
‚≠ê **–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!**

–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –º–æ–∂–µ—à—å:
‚ú® –û–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ
üíñ –ü–æ–ª—É—á–∞—Ç—å –º–æ–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
ü§ó –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º

**–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?** üí´"""

    await update.message.reply_text(success_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    user_message = update.message.text

    if not can_send_message(user_id):
        status = get_user_status(user_id)

        if status == 'trial_ended':
            text = f"""üíî **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω, {user_name}!**

–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –≤—Å–µ {TRIAL_MESSAGES} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. –Ø –±—É–¥—É —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ! üí´"""

            await update.message.reply_text(text, reply_markup=create_payment_keyboard(user_id))
        return

    current_status = get_user_status(user_id)
    if current_status == 'trial':
        increment_message_count(user_id)
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']

        if remaining == 1:
            await update.message.reply_text(
                "‚ö†Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ.",
                reply_markup=create_payment_keyboard(user_id)
            )

    await update.message.chat.send_action(action="typing")
    bot_response = get_deepseek_response(user_message, user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if current_status == 'trial':
        remaining = TRIAL_MESSAGES - users_db[user_id]['messages_used']
        bot_response += f"\n\nüìù –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{TRIAL_MESSAGES}"
    
    await update.message.reply_text(bot_response)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith('week_') or query.data.startswith('month_'):
        plan_type = query.data.split('_')[0]
        target_user_id = int(query.data.split('_')[1])
        
        success = handle_payment(target_user_id, plan_type)
        
        if success:
            await query.edit_message_text(
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! {'–ù–µ–¥–µ–ª—è' if plan_type == 'week' else '–ú–µ—Å—è—Ü'} –¥–æ—Å—Ç—É–ø–∞ üéâ\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üí´",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=None
            )
            
    elif query.data == "my_status":
        await show_user_status(query, user_id)

async def show_user_status(query, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status = get_user_status(user_id)
    user_data = users_db.get(user_id, {})

    if status == 'trial':
        remaining = TRIAL_MESSAGES - user_data.get('messages_used', 0)
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**

–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('messages_used', 0)}/{TRIAL_MESSAGES}
–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}

–ü–∏—à–∏ —Å–º–µ–ª–æ! –ü–æ—Å–ª–µ {TRIAL_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è."""

    elif status == 'subscribed':
        days_left = (user_data['subscription_end'] - datetime.now()).days
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞** üíé

–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ: {days_left} –¥–Ω–µ–π
–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('messages_used', 0)}

–ú–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üíñ"""

    else:  # trial_ended
        text = f"""üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω**

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {TRIAL_MESSAGES}/{TRIAL_MESSAGES}

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞."""

    await query.edit_message_text(text, reply_markup=create_payment_keyboard(user_id))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram
if telegram_app:
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("noway147way147no147", noway_command))
    telegram_app.add_handler(CommandHandler("subscribe", start))  # alias –¥–ª—è /subscribe
    telegram_app.add_handler(CommandHandler("profile", start))    # alias –¥–ª—è /profile
    telegram_app.add_handler(CallbackQueryHandler(handle_callback))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Flask —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.route('/webhook', methods=['POST'])
def webhook():
    """–í–µ–±—Ö—É–∫ –¥–ª—è Telegram"""
    if telegram_app:
        update = Update.de_json(request.get_json(), telegram_app.bot)
        telegram_app.update_queue.put(update)
    return jsonify({"status": "success"}), 200

@app.route('/')
def home():
    return jsonify({
        "status": "healthy",
        "bot": "Virtual Boy ü§ó",
        "features": ["deepseek", "subscriptions", "conversation_memory", "gender_correction"]
    })

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not all([TELEGRAM_TOKEN, DEEPSEEK_API_KEY]):
        logging.error("Missing required environment variables")
        return

    if telegram_app:
        logging.info("ü§ñ Bot is ready for webhook mode")
    else:
        logging.error("Telegram app not initialized")

if __name__ == '__main__':
    start_bot()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
